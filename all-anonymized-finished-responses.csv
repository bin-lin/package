Source,StartDate,EndDate,Duration (in seconds),RecordedDate,Which of the following roles describes you the best?,Which of the following roles describes you the best? - Others? Please specify.,How many years of professional experience of Java development do you have? (optional),Have you ever submitted refactoring contributions to a software project?,Have you ever reviewed refactoring contributions submitted by others?,"Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - change software behavior / original design","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - introduce bugs / breaks APIs / break compatibility","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - violate requirements / domain / design assumptions","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - degrade performance / memory usage","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - lower readability","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - increase complexity","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - do not adhere to coding style / convention, or contain poor variable naming","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - need additional functional/non-functional testing","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - should contain more changes / do not fully address the code quality issue","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - by automated refactoring are not considered valuable","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - have limited value or unclear goals","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - bring potential risks which overweigh their value","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - do not generalize to the whole system","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - do not improve the performance","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - are not in the community interest","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - conflict with planned code changes","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - are non-optimal design solution","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - contain problematic exception handling","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - lead to disagreement on third-party component adoption","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - lead to disagreement on exposed interfaces","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - lead to disagreement on type / accessibility of variables","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - contain problematic / inadequate design patterns","Based on your experience (as contributor or reviewer), please express your agreement level to the following statements. Refactoring contributors are often rejected because the code contributions... - contain unsuitable responsibility distribution among classes or modules","Please specify other reasons you have encountered (as contributor or reviewer) for the rejection of refactoring-related contributions, if not mentioned above. (optional)",What are the most important characteristics of accepted refactoring-related contributions?
OSS,8/11/20 13:24,8/11/20 13:29,330,8/11/20 13:29,Developer,,< 3,Yes,No,Strongly Agree,Strongly Agree,,Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Neutral,,,,,,Neutral,Neutral,Agree,,,,,Agree,Agree,,
OSS,8/11/20 19:00,8/11/20 19:23,1395,8/11/20 19:23,Developer,,< 3,Yes,No,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Neutral,Agree,Disagree,Agree,,,Disagree,,Agree,Neutral,Neutral,Agree,Agree,Neutral,,Neutral,,
OSS,8/12/20 2:19,8/12/20 2:22,178,8/12/20 2:22,Developer,,< 3,Yes,No,Strongly Agree,Strongly Agree,Agree,Strongly Disagree,Disagree,Disagree,Disagree,Agree,Neutral,Agree,Agree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Disagree,Neutral,Agree,Strongly Agree,Agree,,
OSS,8/12/20 5:09,8/12/20 5:18,519,8/12/20 5:18,Developer,,>10 years,Yes,No,,,Agree,Disagree,Agree,Agree,Strongly Disagree,Strongly Agree,Agree,,Agree,Strongly Agree,Agree,Disagree,Agree,,Agree,Disagree,,Agree,Agree,Agree,,I have twice made refactoring pull requests where the reviewer was also a core developer for the code being refactored. Both times the requests met resistance that could be attributed to the reviewer being unwilling to accept that the original design had major flaws. It would have been better if a person without investment in that part of the code had acted as an independent mediator.,"That they don't break anything. This does not mean that breaking refactors are inherently a bad thing, just that they have a lower chance of being accepted."
OSS,8/12/20 5:24,8/12/20 5:31,469,8/12/20 5:31,Developer,,3-5 years,Yes,No,,Agree,,,,,,Agree,,,,Strongly Agree,Agree,,,,,Agree,,,,,,,
OSS,8/12/20 10:03,8/12/20 10:06,186,8/12/20 10:06,Developer,,< 3,Yes,No,Agree,Strongly Agree,Disagree,Strongly Disagree,Disagree,Disagree,Strongly Agree,Agree,Disagree,Neutral,Neutral,Agree,Neutral,Neutral,Disagree,Agree,Neutral,Disagree,Disagree,Neutral,Neutral,Disagree,Disagree,,
OSS,8/12/20 13:02,8/12/20 13:09,389,8/12/20 13:09,Sotware Architect,,6-10 years,Yes,No,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Neutral,,Strongly Disagree,Disagree,Neutral,Disagree,Strongly Disagree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Disagree,Disagree,The benefits aren't understood / the value underestimated.," Easy to understand
- not too big impact on existing structure and interfaces"
OSS,8/13/20 0:30,8/13/20 0:33,212,8/13/20 0:33,Others? Please specify.,Developer and Research,< 3,Yes,No,,Agree,,Neutral,Agree,,,Strongly Agree,Strongly Agree,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Disagree,Neutral,,
OSS,8/13/20 8:08,8/13/20 8:31,1402,8/13/20 8:31,Developer,,< 3,Yes,No,Neutral,Neutral,Disagree,Disagree,Disagree,Neutral,Neutral,Strongly Agree,Agree,Disagree,Neutral,Disagree,Agree,Disagree,Disagree,Disagree,Strongly Disagree,Disagree,Strongly Disagree,Disagree,Strongly Disagree,Disagree,Disagree,,
OSS,8/14/20 12:10,8/14/20 12:12,149,8/14/20 12:12,Others? Please specify.,Devops engineer,3-5 years,Yes,No,Neutral,Neutral,Neutral,Neutral,Disagree,Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Disagree,Agree,Neutral,Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/14/20 14:38,8/14/20 14:41,180,8/14/20 14:41,Technical Lead,,>10 years,Yes,No,Neutral,Disagree,Neutral,Neutral,Disagree,Disagree,Neutral,Neutral,Neutral,Agree,Agree,Agree,,Neutral,Disagree,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Agree,,
OSS,8/14/20 14:56,8/14/20 14:58,142,8/14/20 14:58,Sotware Architect,,>10 years,Yes,No,Agree,Agree,Agree,Neutral,Disagree,Disagree,Agree,Agree,Neutral,Strongly Agree,Neutral,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,,
OSS,8/14/20 19:32,8/14/20 19:38,341,8/14/20 19:38,Developer,,< 3,Yes,No,Neutral,Neutral,Agree,Neutral,Agree,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Strongly Agree,Agree,,"Correctness: Pass all testing modules (e.g., PyTest)
Consistent coding style
Improve the readability / robustness"
OSS,8/15/20 6:53,8/15/20 6:57,241,8/15/20 6:57,Developer,,>10 years,Yes,No,Neutral,Neutral,Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,,Agree,Neutral,Agree,Agree,Neutral,Neutral,Agree,Agree,Strongly Agree,Agree,,
OSS,8/15/20 21:07,8/15/20 21:11,270,8/15/20 21:11,Developer,,6-10 years,Yes,No,Neutral,Disagree,Agree,Neutral,Neutral,Disagree,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Neutral,Neutral,Neutral,Strongly Disagree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,,
OSS,8/15/20 21:16,8/15/20 21:20,262,8/15/20 21:20,Developer,,6-10 years,Yes,No,Strongly Disagree,Disagree,Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Agree,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/15/20 22:25,8/15/20 22:34,543,8/15/20 22:34,Sotware Architect,,>10 years,Yes,No,Strongly Agree,Strongly Agree,Neutral,Strongly Disagree,Strongly Disagree,Neutral,Neutral,Strongly Agree,Agree,Strongly Agree,Neutral,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/16/20 4:36,8/16/20 5:02,1534,8/16/20 5:02,Developer,,3-5 years,Yes,No,Agree,Neutral,Disagree,Disagree,Neutral,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Agree,Disagree,Agree,Agree,Agree,Disagree,Agree,Disagree,Agree,Neutral,,
OSS,8/16/20 8:18,8/16/20 8:29,608,8/16/20 8:29,Developer,,< 3,Yes,No,,,,,,,,,,,,,,,,,,,,,,,,"Unknown.  Refactoring merge requests I make through work are generally accepted, though rare, and I have made exactly one refactoring merge request to an open source project, which I voluntarily closed after discovering a better approach.",
OSS,8/16/20 12:34,8/16/20 12:59,1502,8/16/20 12:59,Developer,,< 3,Yes,No,Agree,Agree,Neutral,Disagree,Strongly Disagree,Disagree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,,
OSS,8/16/20 16:07,8/16/20 16:11,242,8/16/20 16:11,Developer,,< 3,Yes,No,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Agree,Neutral,,Disagree,Neutral,Neutral,Disagree,,Agree,Agree,Agree,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,problem solving
OSS,8/16/20 20:52,8/16/20 20:55,188,8/16/20 20:55,Developer,,3-5 years,Yes,No,Disagree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,,"Performance, readability, patterns "
OSS,8/16/20 20:52,8/16/20 20:55,199,8/16/20 20:55,Developer,,< 3,Yes,No,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Disagree,Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,
OSS,8/16/20 21:01,8/16/20 21:03,171,8/16/20 21:03,Developer,,< 3,Yes,No,Agree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,"Address an underlying issue with the software in question, contain quality, readable code that adheres to the agreed upon style guidelines of the project"
OSS,8/16/20 21:44,8/16/20 21:52,475,8/16/20 21:52,Developer,,3-5 years,Yes,No,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Neutral,Neutral,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Agree,Neutral,Neutral,Neutral,,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,,The code should stick to the same functional and non-functional requirements as per the project design but improve on the code coverage when compared to previous code 
OSS,8/16/20 21:48,8/16/20 22:11,1401,8/16/20 22:11,Developer,,< 3,Yes,No,Neutral,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Neutral,Disagree,Agree,Disagree,Disagree,Agree,Neutral,Neutral,Agree,,Disagree,Neutral,Neutral,Agree,Neutral,Agree,Agree,"Disagreement over whether ""hacky"" solutions are justified to fix small problems in an unorthadox manner, or whether the mere presence of hacky solutions showcases fundamental problems with design philosophy and are thus rejected regardless of effectiveness. Often perfect is the enemy of good enough and results in wasting time for no practical benefit, but death by a thousand papercuts may emerge if hacky solutions are not effectively managed depending on the codebase. Individual reviews may arbitrarily have different decisions on acceptibility here.","A refactor should not cause significant burdens elsewhere unless it carries a significant benefit to those it impacts, either immediately or in the future. A  refactor that does not benefit anybody else but the module maintainer yet causes problems for other people will generally be denied regardless of the individual modules improvements. Therefore the most important characteristic of a refactor is it must provide practical benefit to the majority of the developers/users, or otherwise be transparent to anyone depending upon it; or risks being rejected regardless of if the contribution isolated from the rest of the system is good."
OSS,8/16/20 22:45,8/16/20 22:50,313,8/16/20 22:50,Technical Lead,,>10 years,Yes,No,Agree,Strongly Agree,Disagree,Disagree,Strongly Disagree,Disagree,Disagree,Strongly Agree,Agree,Strongly Agree,Neutral,Agree,Agree,Agree,Neutral,Neutral,Agree,Neutral,,Agree,Agree,Agree,Agree,,
OSS,8/16/20 23:01,8/16/20 23:07,348,8/16/20 23:07,Others? Please specify.,SysOps,< 3,Yes,No,Agree,Strongly Agree,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Disagree,Agree,Agree,Neutral,Disagree,Neutral,Agree,Neutral,Neutral,Agree,Agree,Agree,Agree,Neutral,,
OSS,8/17/20 0:20,8/17/20 3:36,11756,8/17/20 3:36,Developer,,< 3,Yes,No,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,
OSS,8/17/20 3:53,8/17/20 3:59,369,8/17/20 3:59,Developer,,< 3,Yes,No,Agree,Strongly Agree,Neutral,Agree,Disagree,Disagree,Agree,Agree,Neutral,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Neutral,Agree,I believe this table tacked every issue beautifully :),"Ensure the complexity is less, adhere to the style used in the Codebase, do not let code coverage decrease and handle errors gracefully if not accounted for in the original design"
OSS,8/17/20 4:10,8/17/20 4:30,1216,8/17/20 4:30,Technical Lead,,>10 years,Yes,No,Disagree,Disagree,Strongly Agree,Strongly Agree,Disagree,Strongly Agree,Strongly Disagree,Disagree,Disagree,Disagree,Strongly Agree,Strongly Agree,Disagree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Strongly Agree,Disagree,,Ask for reviewers and apply code review suggestions according their comments.
OSS,8/17/20 4:40,8/17/20 4:43,216,8/17/20 4:43,Technical Lead,,< 3,Yes,No,Disagree,Disagree,Neutral,Disagree,Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Neutral,Strongly Agree,,Neutral,Neutral,Neutral,Neutral,Agree,,conflict with planned code changes.,
OSS,8/17/20 5:48,8/17/20 5:50,147,8/17/20 5:50,Developer,,3-5 years,Yes,No,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Disagree,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/17/20 10:22,8/17/20 10:25,212,8/17/20 10:25,Developer,,< 3,Yes,No,Neutral,Strongly Agree,Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Strongly Agree,Agree,Disagree,Disagree,Neutral,Strongly Agree,Strongly Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Neutral,Neutral,,
OSS,8/17/20 12:30,8/17/20 12:49,1097,8/17/20 12:49,Developer,,>10 years,Yes,No,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Disagree,Strongly Agree,Disagree,Strongly Agree,Agree,Strongly Agree,Disagree,Disagree,Agree,Strongly Agree,Agree,Agree,Disagree,Disagree,Agree,Agree,,improve code readability
OSS,8/17/20 13:52,8/17/20 13:58,364,8/17/20 13:58,Developer,,< 3,Yes,No,Agree,Strongly Agree,Neutral,Disagree,Disagree,Neutral,Agree,Agree,Disagree,,Neutral,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Agree,Neutral,Agree,Disagree,Agree,Agree,"Some Other remark: your process of selecting participants is not 100% working. I got chosen because of a seemingly rejected PR in Signal-Android. But thats the way they Merge the code, they dont merge the PR but Just Push the Commit and Close the PR. You might have a Look Into that.","Easy to Understand, Not changing APIs or functionality"
Friends,8/10/20 8:28,8/10/20 8:44,939,8/10/20 8:44,Developer,,3-5 years,Yes,No,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,,"improvement of readability, more elegant design"
Friends,8/10/20 11:51,8/10/20 12:00,490,8/10/20 12:00,Developer,,6-10 years,Yes,No,Disagree,Neutral,Disagree,Strongly Disagree,Strongly Disagree,Disagree,Neutral,Agree,,Agree,Neutral,Agree,,Strongly Disagree,Disagree,Neutral,Disagree,Neutral,Agree,Agree,Neutral,Neutral,Neutral,"In the eyes of the stakeholder/customer refactoring code does not add value. Thus also no time is given to refactoring, as there are ""more urgent things"" to do on the already stretched deadlines.","Actual improvement on the code (efficiency, readability, speed up of further development, stability, ....)."
Friends,8/11/20 8:03,8/11/20 8:11,439,8/11/20 8:11,Developer,,6-10 years,Yes,No,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Agree,Neutral,Agree,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,,
OSS,8/12/20 10:19,8/12/20 10:22,172,8/12/20 10:22,Developer,,3-5 years,No,Yes,Agree,Agree,Neutral,Disagree,Disagree,Agree,Agree,Agree,Disagree,Strongly Disagree,Agree,Agree,Disagree,Disagree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Disagree,,
OSS,8/14/20 3:50,8/14/20 3:55,299,8/14/20 3:55,Technical Lead,,>10 years,No,Yes,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,No clear reason or value given.,Provide a clear description of the reasoning and the objective of the refactoring.
OSS,8/14/20 12:01,8/14/20 12:05,219,8/14/20 12:05,Developer,,< 3,No,Yes,Agree,Strongly Agree,Neutral,,Agree,Agree,Disagree,Agree,,,Agree,Neutral,Agree,Neutral,,,Agree,Neutral,,Neutral,Neutral,Neutral,Neutral,,"Good design, with explicit reasoning behind each change. Sufficient amount of tests"
OSS,8/14/20 23:50,8/15/20 0:09,1177,8/15/20 0:09,Developer,,< 3,No,Yes,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Disagree,Disagree,Agree,Strongly Agree,Neutral,Strongly Disagree,Neutral,Neutral,Neutral,Agree,Agree,Strongly Agree,Neutral,Agree,Agree,,That they are part of a feature implementation contribution and come with adequate tests to prove no change in behaviour. 
OSS,8/15/20 10:08,8/15/20 12:06,7096,8/15/20 12:06,Developer,,6-10 years,No,Yes,Agree,Agree,Disagree,Disagree,Disagree,Agree,Agree,Strongly Agree,Neutral,Neutral,Disagree,Disagree,,Disagree,Strongly Disagree,Agree,,,,Agree,,Agree,Agree,,
OSS,8/16/20 2:18,8/16/20 2:24,390,8/16/20 2:24,Developer,,3-5 years,No,Yes,Agree,Agree,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Agree,,Agree,Disagree,Agree,Neutral,Neutral,Disagree,Disagree,Disagree,Agree,Neutral,Disagree,Disagree,Disagree,Neutral,,
OSS,8/16/20 11:04,8/16/20 11:08,271,8/16/20 11:08,Developer,,>10 years,No,Yes,Neutral,Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Disagree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Neutral,Agree,Neutral,,
OSS,8/16/20 20:07,8/16/20 20:47,2440,8/16/20 20:47,Technical Lead,,>10 years,No,Yes,Agree,Strongly Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Agree,Neutral,Neutral,Agree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Agree,,
OSS,8/17/20 1:59,8/17/20 2:14,855,8/17/20 2:14,Developer,,3-5 years,No,Yes,Agree,Agree,Neutral,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Neutral,Agree,Strongly Agree,Agree,Strongly Disagree,Strongly Disagree,Neutral,Neutral,Agree,,,Disagree,Disagree,Disagree,Disagree,"Similar to ""change software behavior / original design"" or ""readability"", some maintainers reject contributions they don't feel comfortable introducing in the code base, wether the don't appreciate the new design or not enough knowledge to understand a more idiomatic approach. The latter is more common in functional programming languages, as idiomatic algorithms are not as straightforward to understands as imperative algorithms.","Completeness: contributing to an OSS project is much more than the code contribution. Refactorings from third-party contributors usually don't have a purpose and have lower priority than other initiatives the projects' maintainers have ongoing. It's up to the contributor to do all the work to get the contribution merged: align community, document new design, fix tests, write release notes, etc."
Friends,8/11/20 2:14,8/11/20 2:24,596,8/11/20 2:24,Developer,,< 3,No,Yes,Disagree,Disagree,Disagree,Disagree,Neutral,Neutral,Disagree,Agree,Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Increased readability added by refactoring commit was not regarded as important enough to take the time to deliver the change.,Makes it a lot easier to read and understand code. Structures its components in a clear way.
Friends,8/11/20 8:29,8/11/20 8:31,142,8/11/20 8:31,Technical Lead,,6-10 years,No,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Disagree,Agree,Disagree,Agree,Neutral,Neutral,Neutral,Neutral,,Agree,Neutral,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Neutral,Disagree,,
OSS,8/10/20 9:13,8/10/20 9:17,218,8/10/20 9:17,Sotware Architect,,>10 years,Yes,Yes,Agree,Agree,Agree,Agree,Disagree,Disagree,Neutral,Disagree,Strongly Disagree,Neutral,Agree,Agree,Agree,Disagree,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Neutral,,
OSS,8/10/20 9:30,8/10/20 9:35,283,8/10/20 9:35,Developer,,3-5 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Disagree,Disagree,Neutral,Neutral,Agree,Neutral,Neutral,Agree,Agree,Agree,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,,
OSS,8/10/20 9:31,8/10/20 9:52,1234,8/10/20 9:52,Sotware Architect,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Disagree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Neutral,Agree,Agree,"* Breaks backward compatibility

This pertains to open source:

* Contributors come and go usually only submitting a PR to handle their own specific use case.  Reviewers are usually maintainers of the project.  Any significant refactoring means that an area of the codebase that was once fully understood by many, is now fully understood only by the contributor.  In thiscase, the refactoring is going to have to be really good to be accepted.",That any new use cases are fully tested.  Also that the refactoring is isolated and self-contained and doesn't virally effect large portions of the codebase.
OSS,8/10/20 10:35,8/10/20 10:40,351,8/10/20 10:40,Technical Lead,,>10 years,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,"I question the entire premise of the survey. Perhaps you should start by surveying how prevalent this ""problem"" is. 

I don't think refactorings are ""often"" rejected. 

Doing things like changing the test suite to accommodate a ""refactoring"" will clearly cause something to be rejected. Stylistic changes with no clear benefit are at risk of getting rejected.",Clear benefit. Good test coverage. Unchanged tests.
OSS,8/10/20 12:17,8/10/20 12:25,495,8/10/20 12:25,Developer,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Disagree,Agree,Agree,Neutral,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Agree,Agree,Neutral,Agree,Agree,Agree,Neutral,Agree,,"- focused scope
- clearly exposes the solved problem
- doesn't overlook a bigger problem
- clear compatibility story for existing code
"
OSS,8/10/20 19:18,8/10/20 19:23,313,8/10/20 19:23,Sotware Architect,,6-10 years,Yes,Yes,Agree,Disagree,Disagree,Strongly Disagree,Agree,Agree,Disagree,Neutral,Neutral,Neutral,Strongly Disagree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,"often it is simply due to the footprint of the change is too large and seems ""risky"" to introduce especially when it is getting close to release deadline","IMO, refactoring related contribution is important to keep codebase healthy and easy to maintain "
OSS,8/11/20 1:35,8/11/20 1:43,507,8/11/20 1:43,Developer,,6-10 years,Yes,Yes,Disagree,Agree,Neutral,Agree,Agree,Disagree,Agree,Agree,Agree,,Agree,Neutral,Disagree,Disagree,Disagree,Agree,Disagree,Agree,,Agree,Agree,Agree,Agree,,"Clear definition of the goals/risks of the refactoring given time constraints.
Evaluation whether the goals have been been achieved with a reasonable approach (i.e. is there a better more appropriate one that can be used). 
Evaluation of the risks that the particular refactoring implementation has.
Breaking down the refactoring in as small pieces as possible in order to evaluate properly each part of the change. (i believe not mentioned above) i.e. the size of the refactoring matters as well. 

Many of the ones mentioned above (in the survey) are important, however i believe the general approach to refactoring is what is most important, otherwise it depends on case by case.


"
OSS,8/11/20 1:25,8/11/20 1:54,1729,8/11/20 1:54,Technical Lead,,3-5 years,Yes,Yes,Strongly Agree,Neutral,Agree,Agree,Strongly Disagree,Strongly Disagree,Neutral,Agree,Agree,,Agree,Agree,Agree,Disagree,Agree,Agree,Agree,Agree,Neutral,Agree,Neutral,Neutral,Agree,"If the change contains too many manually performed refactorings, it is hard to review it. Often the change is not directly rejected, but nobody wants to review the change and it becomes stale.","1. Separating manual and automatic changes (the reviewer can concentrate on the manual stuff and does not need to review each automatic rename with the same concentration)
2. Perform a real refactoring, don't include functional changes.
3. Describe the overall goal or idea of the refactoring or refactoring step (if you plan to submit further changes following the same goal) in the commit message (or PR/MR description)."
OSS,8/11/20 2:41,8/11/20 2:46,309,8/11/20 2:46,Developer,,< 3,Yes,Yes,Agree,Agree,,Disagree,Neutral,Neutral,Disagree,Agree,Agree,Neutral,Disagree,Agree,Disagree,Disagree,Disagree,Neutral,Agree,Agree,Agree,Agree,Neutral,Neutral,Agree,,
OSS,8/11/20 9:17,8/11/20 9:22,303,8/11/20 9:22,Sotware Architect,,6-10 years,Yes,Yes,Agree,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Neutral,Neutral,Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,,
OSS,8/11/20 10:10,8/11/20 10:17,404,8/11/20 10:17,Sotware Architect,,6-10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Agree,Neutral,Disagree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,,"Results in cleaner code, and increased maintainability."
OSS,8/11/20 10:16,8/11/20 10:23,469,8/11/20 10:23,Technical Lead,,6-10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Agree,Neutral,Agree,Disagree,Strongly Agree,Disagree,Disagree,Strongly Agree,Strongly Agree,Disagree,Disagree,Disagree,Agree,Disagree,Disagree,Disagree,Agree,Disagree,Disagree,Agree,"1) Test coverage. Often, older code being refactored is ""ugly"", may not have great test coverage, but is battle-tested in production. The newer refactored code isn't battle-tested, so it needs more automated test coverage to compensate.

2) Clear benefit, such as improved readability, testability, modularity, or extensibility. Sometimes the benefits of a refactor are subjective, and there is not consensus that the new version is actually an improvement.",
OSS,8/11/20 12:48,8/11/20 12:51,145,8/11/20 12:51,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Neutral,Disagree,Agree,Neutral,Agree,Neutral,Agree,Agree,Agree,Disagree,Disagree,Disagree,Disagree,Neutral,Disagree,Disagree,Agree,Neutral,Disagree,Disagree,,
OSS,8/11/20 13:59,8/11/20 14:09,563,8/11/20 14:09,Test Analyst/Tester/Test Engineer,,>10 years,Yes,Yes,Disagree,Neutral,Neutral,Neutral,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Strongly Agree,Neutral,Disagree,Neutral,Agree,Neutral,Neutral,,Strongly Agree,Neutral,Neutral,Agree,"* touches too many files
* reviewer is uncomfortable with generics
* contains a mix of refactoring plus other changes
* needlessly renames variables
* doesn't address unrelated issues ""while you're in there"" e.g. if you touch it, you should add missing javadocs, clean up compiler warnings, etc at the same time
* will make it harder to backport fixes between branches with and without the refactoring",accompanied by clear description of the scope of changes and why they are needed
OSS,8/11/20 20:16,8/11/20 20:20,212,8/11/20 20:20,Developer,,6-10 years,Yes,Yes,Strongly Disagree,Strongly Agree,Neutral,Disagree,Neutral,Neutral,Neutral,Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Neutral,Agree,Disagree,Disagree,Disagree,Neutral,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,"Clean, understandable and well-documented code that target the required goal while maintaining contribution guidelines should be considered acceptable. Additionally, accepting feedback from project maintainers and making requested changes or discussion the possibility of changes helps the software improve over time."
OSS,8/11/20 20:29,8/11/20 20:41,733,8/11/20 20:41,Developer,,>10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Disagree,Agree,Neutral,Agree,Agree,Neutral,Neutral,Disagree,Neutral,Neutral,Agree,Agree,Agree,Agree,Agree,Neutral,,"Have proof that refactoring will not break current functionality. Best is the proof is as repeatable, automated tests"
OSS,8/11/20 20:39,8/11/20 20:42,171,8/11/20 20:42,Developer,,3-5 years,Yes,Yes,Agree,Disagree,Agree,Agree,Agree,Disagree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Neutral,Strongly Disagree,Disagree,Strongly Disagree,Agree,Neutral,Neutral,Agree,Disagree,Neutral,Strongly Agree,,
OSS,8/11/20 23:06,8/11/20 23:11,283,8/11/20 23:11,Sotware Architect,,>10 years,Yes,Yes,Disagree,Agree,Neutral,Strongly Agree,Agree,Agree,Agree,Agree,Disagree,Neutral,Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,,
OSS,8/11/20 23:13,8/11/20 23:16,203,8/11/20 23:16,Developer,,< 3,Yes,Yes,Neutral,Agree,Agree,Agree,Disagree,Neutral,Agree,Neutral,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Disagree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Neutral,,
OSS,8/12/20 0:56,8/12/20 0:59,175,8/12/20 0:59,Developer,,3-5 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,Agree,Neutral,Neutral,Disagree,Agree,Neutral,Neutral,Disagree,Agree,Agree,Neutral,Neutral,Agree,Neutral,Agree,Agree,,
OSS,8/12/20 1:12,8/12/20 1:16,207,8/12/20 1:16,Technical Lead,,>10 years,Yes,Yes,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Strongly Agree,Agree,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Neutral,Agree,Disagree,Disagree,Agree,,
OSS,8/12/20 0:46,8/12/20 1:23,2191,8/12/20 1:23,Others? Please specify.,Technical Advisor,< 3,Yes,Yes,Neutral,Strongly Agree,Agree,Disagree,Agree,Agree,Agree,Strongly Disagree,Disagree,Neutral,Disagree,Agree,Agree,Agree,Neutral,Agree,Neutral,Disagree,Disagree,Disagree,Neutral,Neutral,Disagree,,Simplification of existing code or update of old interfaces. These are typically tasks that are not often done by the original authors and where contributions are readily accepted.
OSS,8/12/20 1:15,8/12/20 1:29,859,8/12/20 1:29,Developer,,3-5 years,Yes,Yes,Neutral,Agree,Strongly Agree,Neutral,Agree,Agree,Neutral,Neutral,Agree,Disagree,Agree,Agree,Agree,Disagree,Agree,Neutral,Neutral,Agree,Disagree,Neutral,Strongly Agree,Agree,Strongly Agree,,
OSS,8/12/20 3:08,8/12/20 3:11,205,8/12/20 3:11,Developer,,3-5 years,Yes,Yes,Disagree,Strongly Agree,Agree,Agree,Agree,Agree,Neutral,Agree,Neutral,Disagree,Agree,Strongly Agree,Neutral,Disagree,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,Agree,Neutral,,
OSS,8/12/20 3:55,8/12/20 3:59,220,8/12/20 3:59,Developer,,3-5 years,Yes,Yes,Disagree,Strongly Agree,Neutral,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Disagree,Agree,Agree,Strongly Agree,,Neutral,Disagree,Neutral,Disagree,Neutral,Neutral,Agree,Neutral,Neutral,Strongly Agree,,
OSS,8/12/20 3:49,8/12/20 4:01,695,8/12/20 4:01,Developer,,>10 years,Yes,Yes,Neutral,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,,,Agree,Strongly Agree,Agree,Neutral,Agree,Disagree,Agree,Neutral,Disagree,Neutral,Disagree,Disagree,Neutral,Disagree,"1. Subjective design
2. Refactoring makes the old code alien to the initial author too as well as to the other developers.
3. Steal developers' time that has to review the refactoring but brings no immediate business value and only subjective long-term values.
","1. Makes code more flexible for the integration of extensions.
2. Makes a seriously messy code more readable (rarely)."
OSS,8/11/20 22:30,8/12/20 5:19,24532,8/12/20 5:19,Developer,,,Yes,Yes,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Agree,Agree,Neutral,,Agree,Neutral,Agree,Agree,Disagree,Strongly Disagree,Disagree,Disagree,Neutral,Neutral,Agree,Neutral,Neutral,,
OSS,8/12/20 6:29,8/12/20 6:33,265,8/12/20 6:33,Developer,,3-5 years,Yes,Yes,Disagree,Neutral,Disagree,Neutral,Agree,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Neutral,Agree,Agree,Agree,Neutral,Agree,Agree,Neutral,Agree,,
OSS,8/12/20 6:52,8/12/20 7:00,466,8/12/20 7:00,Sotware Architect,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Disagree,Disagree,Neutral,Neutral,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,,It should adhere to overall architecture of the application and decouple the components. It should also implement the design and coding guidelines.
OSS,8/12/20 7:07,8/12/20 7:18,653,8/12/20 7:18,Developer,,6-10 years,Yes,Yes,Strongly Agree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Strongly Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Disagree,Strongly Disagree,Strongly Disagree,Disagree,Agree,Neutral,Disagree,Neutral,Neutral,Neutral,Disagree,,"Such contribution must have:
  - complete backward compatibility support
  - clear argumentation about the reason of the refactoring
  - same or better code quality (testing coverage, checkstyle issues, etc) "
OSS,8/12/20 7:25,8/12/20 7:31,349,8/12/20 7:31,Technical Lead,,>10 years,Yes,Yes,Neutral,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Disagree,Disagree,Disagree,Strongly Agree,Disagree,Neutral,Disagree,Neutral,Neutral,Neutral,Neutral,Agree,Disagree,Agree,Agree,,Fall-back to the old way incase of unforeseen consequences
OSS,8/12/20 7:47,8/12/20 7:58,632,8/12/20 7:58,Developer,,6-10 years,Yes,Yes,Disagree,Agree,Agree,Agree,Agree,Disagree,Agree,Strongly Agree,Agree,Neutral,Agree,Neutral,Strongly Agree,Disagree,Neutral,Disagree,Agree,Disagree,Disagree,Neutral,Disagree,Disagree,Agree,,Does not break the requirements of a paying customer. If the change reimplement all the requirements in another way (such as still maintaining a function the software had just in a completely rewritten way) then that would be acceptable. 
OSS,8/12/20 8:57,8/12/20 9:04,407,8/12/20 9:04,Test Analyst/Tester/Test Engineer,,6-10 years,Yes,Yes,Agree,Disagree,Disagree,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Neutral,Neutral,Disagree,Disagree,Neutral,Neutral,Disagree,Strongly Disagree,Strongly Disagree,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Projects I work on are really refactoring-friendly. We would love to do the refactoring but the main issue is that there is almost no time for it.,The most important thing is to have a clear reason why the code refactoring is being made and to clearly present intended effect of it.
OSS,8/12/20 9:06,8/12/20 9:16,575,8/12/20 9:16,Technical Lead,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Neutral,Neutral,,Strongly Agree,Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,,
OSS,8/12/20 9:28,8/12/20 9:31,175,8/12/20 9:31,Technical Lead,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/12/20 9:52,8/12/20 10:00,465,8/12/20 10:00,Developer,,6-10 years,Yes,Yes,Strongly Agree,Strongly Agree,Agree,Disagree,Neutral,Agree,Strongly Disagree,Strongly Agree,Disagree,Strongly Disagree,Agree,Agree,Agree,Disagree,Neutral,,Agree,Disagree,,Agree,,Agree,Neutral,"Risk of breaking existing code (already mentioned in survey questions)
","Successful refactoring contributions:
Make the code more resilient with better error handling and better logging.
Reduce complexity metrics like cyclomatic complexity.
Improve test coverage.
Reduce, not increase the amount of state (variables) in the system.
Bring consistency to names and to the data model."
OSS,8/12/20 9:53,8/12/20 10:03,622,8/12/20 10:03,Developer,,3-5 years,Yes,Yes,Neutral,Agree,Disagree,Disagree,Agree,Agree,Disagree,Strongly Agree,Strongly Disagree,Agree,Agree,Strongly Agree,Agree,Neutral,Agree,Strongly Agree,Disagree,Disagree,Neutral,Neutral,Neutral,Neutral,Neutral,"In general, developers still feel these are lower priority than new functionality.  Many co-workers feel they do not have enough time.",That the business adds a user story and approves the work.  Refactoring or cleaning the code is considered not business value.
OSS,8/12/20 13:19,8/12/20 13:30,675,8/12/20 13:30,Others? Please specify.,"We didn't have set roles - I was the admin mainly responsible for accepting PRs, and large parts of the development. I also made choices about any major design decisions.",< 3,Yes,Yes,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Neutral,Neutral,Agree,Neutral,Agree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Disagree,,"This questions have very different answers whether I look at it from the perspective of a GoIV admin, or with the software in my professional life.

For GoIV - a PR needs to either require no maintainance, or a guarantee that the coder will maintain any added functionallity. - We failed at this aspect with the Moveset integration, and thus ended up with a broken part of the application we still havent removed.

At my job: The PR needs to fix the jira issue requirements. "
OSS,8/12/20 14:08,8/12/20 14:20,713,8/12/20 14:20,Developer,,>10 years,Yes,Yes,Neutral,Strongly Agree,Neutral,Disagree,Neutral,Neutral,Strongly Disagree,Disagree,Neutral,Disagree,Disagree,Agree,Disagree,Disagree,Disagree,Neutral,Agree,Disagree,Disagree,Agree,Agree,Neutral,Neutral,"Not done incrementally, such that there is an enormous amount of code change that the reviewer has no reasonable chance of confirming the changes to be safe and without side-effects.","Is done for a good reason and adds value to the product, which could be an improvement in maintainability, performance, or in preparation for an upcoming feature."
OSS,8/12/20 16:27,8/12/20 16:37,570,8/12/20 16:37,Technical Lead,,>10 years,Yes,Yes,Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Disagree,Disagree,Disagree,,,Neutral,Disagree,Disagree,,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,,
OSS,8/12/20 18:21,8/12/20 18:24,166,8/12/20 18:24,Technical Lead,,6-10 years,Yes,Yes,Agree,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,meeting halfway between the contributor and the revieer
OSS,8/12/20 18:34,8/12/20 18:43,519,8/12/20 18:43,Technical Lead,,>10 years,Yes,Yes,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Agree,,Agree,,Neutral,,Agree,,Neutral,,Agree,Agree,Agree,Agree,Strongly Agree,Agree,Neutral,Agree,,1) no regression 2) improvement in performance 3)simpler and easier  implementation 
OSS,8/12/20 18:43,8/12/20 18:49,375,8/12/20 18:49,Technical Lead,,>10 years,Yes,Yes,Neutral,Agree,Disagree,Agree,Strongly Agree,Neutral,Strongly Agree,Agree,Agree,Neutral,Neutral,Disagree,Agree,Disagree,Neutral,Agree,Agree,Disagree,Neutral,Neutral,Neutral,Agree,Neutral,,"Matches existing code quality, and adds value for the community"
OSS,8/12/20 21:00,8/12/20 21:05,293,8/12/20 21:05,Developer,,3-5 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,,Neutral,Strongly Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,,
OSS,8/12/20 22:43,8/12/20 22:48,269,8/12/20 22:48,Technical Lead,,>10 years,Yes,Yes,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Strongly Agree,Agree,,Strongly Agree,Strongly Agree,Agree,Agree,,Agree,Neutral,Strongly Agree,,,Neutral,Strongly Agree,Strongly Agree,Introduced 3rd party component where it wasn't necessary.,"1) Don't break existing behavior.
2) Solve a legitimate problem with the old code."
OSS,8/13/20 0:06,8/13/20 0:13,409,8/13/20 0:13,Developer,,>10 years,Yes,Yes,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Neutral,Neutral,Strongly Disagree,Disagree,Strongly Agree,Disagree,Strongly Disagree,Disagree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,Sometimes they grow too big,"Consise / does one thing, clean up messy stuff (worth the risk) / fix nasty bug"
OSS,8/13/20 1:04,8/13/20 1:08,245,8/13/20 1:08,Developer,,>10 years,Yes,Yes,Disagree,Agree,Neutral,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Neutral,Neutral,Disagree,Disagree,Agree,Disagree,Disagree,Neutral,Disagree,Disagree,Disagree,Neutral,Agree,Disagree,Disagree,,
OSS,8/13/20 1:07,8/13/20 1:13,359,8/13/20 1:13,Developer,,>10 years,Yes,Yes,Disagree,Agree,Disagree,Disagree,Strongly Disagree,Disagree,Agree,Agree,Agree,Agree,,,,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Disagree,,"To big commit (to many files) with more than one reason for change, e.g. rename variable1 and fix typo and ... some hidden changes?",Provide a pull request with a small change. Discuss bigger changes before doing a PR.
OSS,8/13/20 3:58,8/13/20 4:02,252,8/13/20 4:02,Developer,,6-10 years,Yes,Yes,Agree,Agree,Agree,Disagree,Disagree,Neutral,Disagree,Strongly Agree,Disagree,Strongly Disagree,Agree,Strongly Agree,Neutral,Disagree,,Neutral,Neutral,Neutral,Agree,Agree,Disagree,Neutral,Disagree,"I think this is missing the most common reason I’ve seen: ego. Often refactoring changes are rejected because the original author of the code is attached to it and perceives any change as negative, regardless of the change itself.","Size. Refactoring is not rewriting. I think I’d much more likely accept a series of small, incremental changes that can be stopped at any time and still improve the code."
OSS,8/13/20 2:57,8/13/20 4:21,5074,8/13/20 4:21,Sotware Architect,,6-10 years,Yes,Yes,Agree,Neutral,Strongly Disagree,Neutral,Strongly Agree,Agree,Strongly Disagree,Agree,Disagree,Neutral,Agree,Strongly Agree,Disagree,Disagree,Agree,Agree,Neutral,Agree,Agree,Agree,Disagree,Disagree,Disagree,,
OSS,8/13/20 7:32,8/13/20 7:37,303,8/13/20 7:37,Developer,,3-5 years,Yes,Yes,Neutral,Neutral,,,Disagree,Disagree,Disagree,Strongly Agree,Strongly Disagree,Disagree,Disagree,Disagree,Agree,Neutral,Neutral,Agree,Disagree,Disagree,Neutral,,,,,,
OSS,8/13/20 8:57,8/13/20 9:01,265,8/13/20 9:01,Developer,,6-10 years,Yes,Yes,Neutral,Agree,Agree,,Disagree,,Disagree,Agree,Disagree,Disagree,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,Neutral,Neutral,Disagree,Agree,Agree,Agree,Strongly Agree,,"1. Make the code easier to understand
2. No functional changes to the unit of code being changed."
OSS,8/14/20 0:51,8/14/20 0:59,464,8/14/20 0:59,Developer,,>10 years,Yes,Yes,Agree,Agree,,Disagree,Strongly Disagree,Disagree,Disagree,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Disagree,Disagree,Agree,Disagree,Neutral,Neutral,Agree,Agree,Neutral,Agree,,"Improve performance, code readability, use newer or more optimal java features."
OSS,8/14/20 1:09,8/14/20 1:13,240,8/14/20 1:13,Developer,,>10 years,Yes,Yes,Agree,Strongly Agree,Disagree,Agree,Disagree,Disagree,Disagree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Neutral,Neutral,Neutral,Disagree,Strongly Disagree,,
OSS,8/14/20 8:52,8/14/20 8:55,218,8/14/20 8:55,Developer,,6-10 years,Yes,Yes,,,,,,,,Agree,,,,Agree,,,,,,,,,,,,,
OSS,8/14/20 9:03,8/14/20 9:06,195,8/14/20 9:06,Developer,,< 3,Yes,Yes,Disagree,Agree,,Disagree,,,Disagree,,,,,Agree,,,,Disagree,Agree,Disagree,,Disagree,Disagree,Strongly Disagree,Neutral,,
OSS,8/14/20 9:22,8/14/20 9:24,150,8/14/20 9:24,Developer,,< 3,Yes,Yes,Strongly Agree,Agree,Neutral,Strongly Disagree,Neutral,Disagree,Neutral,Disagree,Strongly Disagree,Disagree,Agree,Neutral,Disagree,Disagree,Neutral,Agree,Agree,Agree,Disagree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,,Obvious relationships between old and new code and functionality
OSS,8/14/20 9:22,8/14/20 9:29,440,8/14/20 9:29,Developer,,>10 years,Yes,Yes,Agree,Agree,Agree,Disagree,Disagree,Neutral,Disagree,Neutral,Disagree,Disagree,Agree,Strongly Agree,Disagree,Disagree,Neutral,Neutral,Agree,Neutral,Agree,Disagree,Disagree,Agree,Agree,,"They come from a developer the reviewers trust. They explain what they are doing, how they are doing it, potential problems, and alternative designs considered."
OSS,8/14/20 10:26,8/14/20 10:33,428,8/14/20 10:33,Others? Please specify.,"I am a PSC member. Consider using open source roles like Project Steering Committee, Committer, Contributors ... the roles you use are based software development roles and responsibility not merit based roles employed by open source software teams.",>10 years,Yes,Yes,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Neutral,Neutral,Neutral,"Refactoring by definition is to improve an aspect of the software without changing function. Rejected refactoring usually accidentally change functionality, a mistake that can be detected during review before the work is accepted.

The biggest obstacle to reacting related contributions is communication. ","Communication is most important in an open source project of any size.

GeoTools (and many OSGeo projects) have adopted a proposal process (or change control process) so that big activities that affect the codebase can be communicated to the team and scheduled as a group activity. We have done a number of large scale refactoring to this 20 year codebase and this ability is central to our long term success."
OSS,8/14/20 10:32,8/14/20 10:39,408,8/14/20 10:39,Sotware Architect,,6-10 years,Yes,Yes,Disagree,Neutral,Agree,Agree,Neutral,Agree,Strongly Agree,Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Agree,Strongly Agree,Agree,Strongly Agree,Neutral,Neutral,Neutral,Agree,Neutral,"Repository admin is simply unresponsive or the project is un-officially dead, without proper notification or documentation, therefore no pull requests are actioned.",
OSS,8/14/20 10:40,8/14/20 10:44,241,8/14/20 10:44,Technical Lead,,< 3,Yes,Yes,Neutral,Strongly Agree,Agree,Neutral,Neutral,Agree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Strongly Disagree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,"Change is too big (many projects do not like changes for fear of breaking something and prefer incremental changes, even if they lead to worse code).
Changes are not understood (code contributed by contributors not here anymore).",Presence of tests before/after.
OSS,8/14/20 11:09,8/14/20 11:16,447,8/14/20 11:16,Technical Lead,,>10 years,Yes,Yes,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Neutral,,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,Green tests
OSS,8/14/20 11:34,8/14/20 11:39,324,8/14/20 11:39,Test Analyst/Tester/Test Engineer,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,
OSS,8/14/20 11:36,8/14/20 11:40,193,8/14/20 11:40,Technical Lead,,< 3,Yes,Yes,Agree,Strongly Agree,Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Neutral,Strongly Disagree,Agree,Strongly Disagree,Neutral,Neutral,Neutral,Strongly Disagree,Agree,Agree,Disagree,Agree,,Strongly Disagree,Strongly Disagree,Neutral,,,The contribution doesn't break anything or increase maintenance costs.
OSS,8/14/20 11:39,8/14/20 11:44,350,8/14/20 11:44,Developer,,< 3,Yes,Yes,Neutral,Agree,,Agree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Disagree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,,"They fit into the project's general design, improve readability and try to minimize failure cases through more expressive typing."
OSS,8/14/20 11:58,8/14/20 12:06,469,8/14/20 12:06,Technical Lead,,>10 years,Yes,Yes,Agree,Agree,Agree,Disagree,Agree,Agree,Strongly Agree,Agree,Agree,,Neutral,Agree,Disagree,Neutral,Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Agree,Neutral,,Code Styling
OSS,8/14/20 12:05,8/14/20 12:08,183,8/14/20 12:08,Sotware Architect,,>10 years,Yes,Yes,Disagree,Disagree,Neutral,Disagree,Agree,Disagree,Neutral,Strongly Agree,Strongly Agree,Neutral,Neutral,Disagree,Agree,Neutral,Strongly Disagree,Disagree,Disagree,Disagree,Neutral,Disagree,Disagree,Disagree,Disagree,,
OSS,8/14/20 12:06,8/14/20 12:12,349,8/14/20 12:12,Technical Lead,,>10 years,Yes,Yes,Agree,Agree,,Neutral,Disagree,Neutral,Disagree,Agree,Neutral,Neutral,Disagree,Agree,,Neutral,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Agree,Neutral,Agree,Disagree,,"Don't break existing code / API, reduce (rather than increase) complexity and/or lines of code"
OSS,8/14/20 12:12,8/14/20 12:16,220,8/14/20 12:16,Others? Please specify.,Data Analyst/Scientist,3-5 years,Yes,Yes,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Neutral,Disagree,Agree,Neutral,,Strongly Agree,,Neutral,Disagree,,Strongly Agree,Agree,Neutral,Neutral,Neutral,Agree,Agree,Neutral,Proper explanation of the rationale behind the pull request.,Willingness of the contributor to head and address the comments.
OSS,8/14/20 12:30,8/14/20 12:35,265,8/14/20 12:35,Sotware Architect,,>10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Disagree,Agree,Neutral,Disagree,Disagree,Strongly Disagree,,Agree,Disagree,Disagree,Neutral,Agree,Strongly Agree,Neutral,Agree,Disagree,Neutral,Strongly Agree,Agree,Agree,,
OSS,8/14/20 12:37,8/14/20 12:42,289,8/14/20 12:42,Sotware Architect,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Agree,Agree,Agree,Agree,Neutral,Agree,Agree,,
OSS,8/14/20 12:42,8/14/20 12:45,227,8/14/20 12:45,Technical Lead,,< 3,Yes,Yes,Disagree,Agree,Agree,Neutral,Neutral,Agree,Agree,Agree,Disagree,Disagree,Disagree,Agree,Agree,Disagree,Disagree,Agree,Agree,Neutral,Disagree,Agree,Neutral,Agree,Agree,,"Clearer / more readable changes that make the code either more maintainable, testable, efficient or a combination of those things. Generally, refactorings should not make code more complex unless there is no other way to fix a bug or deal with a particular issue in the refactor."
OSS,8/14/20 12:32,8/14/20 12:48,933,8/14/20 12:48,Developer,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Neutral,Disagree,Disagree,Neutral,Agree,Strongly Agree,Neutral,Agree,Neutral,Strongly Agree,Agree,Agree,Neutral,Disagree,Agree,Disagree,Disagree,Agree,Neutral,Agree,Neutral,,"Simple and understandable code, not prone to errors or side effects"
OSS,8/14/20 12:44,8/14/20 12:49,293,8/14/20 12:49,Developer,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Agree,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Agree,Strongly Agree,Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,,Increase on quality of resulting software
OSS,8/14/20 13:27,8/14/20 13:34,425,8/14/20 13:34,Developer,,< 3,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Agree,Neutral,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Agree,Agree,Neutral,Disagree,Agree,Disagree,Agree,Agree,Agree,Agree,Neutral,Strongly Agree,,"adhere to standards, are tested and do not break any tests, do not only address specific use cases but generalize "
OSS,8/14/20 14:01,8/14/20 14:06,265,8/14/20 14:06,Developer,,>10 years,Yes,Yes,Agree,Agree,Neutral,,Disagree,Agree,Disagree,Agree,Neutral,,Agree,Neutral,,,Strongly Agree,Agree,,Disagree,Neutral,Neutral,,Agree,Strongly Agree,,"Focus, clear goal setting, reasonable explanation of motivation and context "
OSS,8/14/20 14:13,8/14/20 14:18,270,8/14/20 14:18,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,Agree,Disagree,Agree,Agree,Agree,Agree,Neutral,Agree,Strongly Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Neutral,"No upfront contact or discussion 

Too large PRs
No tests
","Focused.  Minimal 
Agreed upon
Tested
High Roi"
OSS,8/14/20 14:15,8/14/20 14:19,265,8/14/20 14:19,Developer,,>10 years,Yes,Yes,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Disagree,Strongly Disagree,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Agree,,Agree,Neutral,Agree,Agree,"I missed some very important points, why PR might be rejected:

- Missing documentation for new features
- Missing tests","Good code quality
- Documentation
- Tests"
OSS,8/14/20 14:23,8/14/20 14:27,223,8/14/20 14:27,Developer,,3-5 years,Yes,Yes,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Agree,Strongly Agree,Neutral,Disagree,Agree,Agree,,,,,,,,,
OSS,8/14/20 14:28,8/14/20 14:33,334,8/14/20 14:33,Developer,,>10 years,Yes,Yes,Strongly Agree,Agree,Agree,Neutral,Neutral,Agree,Neutral,Agree,Neutral,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Agree,"Too large for convenience: change touches a lot of code or changes something fundamental, would require extensive reviewing and testing.","Brings value (eg. performance, readability, testability...), is limited enough in scope and effect."
OSS,8/14/20 14:34,8/14/20 14:44,625,8/14/20 14:44,Developer,,6-10 years,Yes,Yes,Neutral,Neutral,Agree,Neutral,Disagree,Disagree,Neutral,Neutral,Neutral,Disagree,Disagree,Strongly Agree,Disagree,Disagree,Strongly Disagree,Disagree,Neutral,Agree,Agree,Disagree,Disagree,Agree,Disagree,"As for a financial application, security has top priority. If a refactoring is too large/complex it carries some risk to break the existing project and that is a main reason why we reject PRs. Other reasons is when devs introduce different style/patterns/exc handling as used in the project. We usually recommend devs to break up PRs to small chunks doing small and easy to review changes which limits risks to break things. Best is also to add tests to ensure the existing beahviour has not changed by the refactoring. Pure technical refacotrings (or automated renaming over many classes) are not considered valueable as they inroduce more effort for the reviewer as if he would do the change himself. The trust into a new dev is lower than into a maintainer, so such refactorings are better done by maintainers themself to limit risk exposure (malicious dev tries to inject some change by burying it in a mass of changes in the hope it get overlooked). 
","Small, limited in scope, easy to review, tests."
OSS,8/14/20 15:16,8/14/20 15:25,504,8/14/20 15:25,Technical Lead,,3-5 years,Yes,Yes,Agree,Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Disagree,Agree,Strongly Disagree,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Strongly Agree,,"Maintenance of behavior, improvement of code readability, improvement of code design and architecture, improvement of tesing coverage, comments about the refactoring decisions, aligned refactoring with the team, performance improvement."
OSS,8/14/20 15:26,8/14/20 15:30,230,8/14/20 15:30,Technical Lead,,>10 years,Yes,Yes,Strongly Disagree,Agree,Neutral,Agree,Agree,Agree,Agree,Disagree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,,
OSS,8/14/20 15:42,8/14/20 15:46,211,8/14/20 15:46,Developer,,>10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Agree,Strongly Disagree,Disagree,,Strongly Agree,Neutral,Disagree,Agree,Neutral,Neutral,Disagree,Agree,Agree,Neutral,Disagree,Agree,Neutral,Neutral,Neutral,Neutral,,
OSS,8/14/20 16:16,8/14/20 16:21,307,8/14/20 16:21,Developer,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Agree,Neutral,Disagree,Neutral,Agree,Agree,Neutral,Neutral,Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Agree,Strongly Agree,Agree,,
OSS,8/14/20 16:38,8/14/20 16:42,224,8/14/20 16:42,Developer,,>10 years,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,I haven't seen enough of these to answer this question but pretty much all of the answers are valid reasons to reject a PR.,Consultation. Massive changes with no discussion are a water of everyone's time.
OSS,8/14/20 18:56,8/14/20 19:00,236,8/14/20 19:00,Technical Lead,,< 3,Yes,Yes,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,,"1. Good design;
2. Keep less bugs;"
OSS,8/14/20 19:58,8/14/20 20:13,888,8/14/20 20:13,Sotware Architect,,6-10 years,Yes,Yes,Strongly Disagree,Neutral,Disagree,Strongly Agree,Strongly Disagree,Neutral,Strongly Disagree,Strongly Agree,Strongly Disagree,Disagree,Strongly Disagree,Disagree,Neutral,Strongly Disagree,Disagree,Disagree,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Strongly Disagree,Disagree,,"1. Improve performance.
2. The source code structure is more friendly, and the code is easier to read.
3. Reduce the consumption of resources.
4. It is more friendly to operation and maintenance and reduces manual intervention."
OSS,8/14/20 22:12,8/14/20 22:22,622,8/14/20 22:22,Developer,,>10 years,Yes,Yes,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Neutral,Strongly Agree,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,,
OSS,8/15/20 1:32,8/15/20 1:40,513,8/15/20 1:40,Developer,,,Yes,Yes,Disagree,,Neutral,Disagree,Disagree,Disagree,Disagree,Strongly Agree,,Neutral,Disagree,Agree,,Neutral,Disagree,Agree,,,,Neutral,Agree,,,,well tested that no change in performance or behaviour
OSS,8/15/20 1:21,8/15/20 1:43,1288,8/15/20 1:43,Developer,,< 3,Yes,Yes,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,It is not sponsored by most companies and thus lacks support budgets for thorough testing,"code refactorings that do not change or alter application behavior.
Changes that are supported by full unit and functional tests. Changes that improve code readability while reducing complexity"
OSS,8/15/20 6:41,8/15/20 6:51,623,8/15/20 6:51,Developer,,6-10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Agree,Neutral,Agree,Disagree,Neutral,Disagree,Agree,Agree,Disagree,Strongly Disagree,Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Agree,Neutral,Neutral,General unwillingness to review and accept major code changes,They are supported by multiple contributors
OSS,8/15/20 10:20,8/15/20 10:26,373,8/15/20 10:26,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Neutral,Strongly Agree,Disagree,Neutral,Strongly Agree,Agree,Neutral,Disagree,Neutral,Agree,Agree,Neutral,Neutral,Agree,Neutral,Neutral,Agree,The maintainers and the contributor can see what “better” code looks like differently and contributors often fail to check on whether a certain type of change would even be considered before submitting them.,"They don’t violate the expectations of the maintainers, explicit or implicit."
OSS,8/15/20 12:32,8/15/20 12:49,1034,8/15/20 12:49,Sotware Architect,,>10 years,Yes,Yes,Agree,Agree,Agree,Agree,Disagree,Agree,Agree,Strongly Agree,,Neutral,Agree,Agree,Agree,Strongly Disagree,Agree,Strongly Agree,Agree,,,Agree,Agree,Disagree,Agree,I believe the resistance to accepting refactoring PRs owes a lot to the https://en.wikipedia.org/wiki/Curse_of_knowledge ... i.e. that those reviewing the PR already understand how the existing code works through experience and therefore find it difficult to see weaknesses in the design pertaining to the code's readability to fresh eyes. This may cause them to underestimate the value of a PR which makes things more understandable to a consumer of the public APIs.,"1. limited scope; if a refactoring PR focuses on one issue of design or readability or code organization, the barrier to consensus is lowered and the probability of acceptance is increased

2. evidence supporting the idea that the existing code is problematic in some way; without this, if it is left to a ""judgment call"" of all reviewers, then a consensus may be difficult or impossible since there will be variations among the reviewers' assessments based on judgement"
OSS,8/15/20 18:24,8/15/20 18:28,200,8/15/20 18:28,Developer,,6-10 years,Yes,Yes,Agree,Agree,,Disagree,Agree,Agree,Neutral,Strongly Agree,Agree,,Agree,Neutral,Agree,Agree,Disagree,Disagree,Neutral,Agree,,Agree,Agree,Strongly Agree,Agree,,
OSS,8/15/20 18:37,8/15/20 18:46,534,8/15/20 18:46,Developer,,6-10 years,Yes,Yes,Agree,Strongly Agree,Agree,Disagree,Disagree,Agree,Strongly Agree,Agree,Neutral,Neutral,Neutral,Strongly Agree,Neutral,Disagree,Disagree,Agree,Agree,Disagree,Neutral,Neutral,Neutral,Agree,Agree,,"Clear goals, clear/worthwhile proposed benefit, well-tested"
OSS,8/15/20 20:31,8/15/20 20:42,661,8/15/20 20:42,Sotware Architect,,6-10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,,Neutral,Agree,Neutral,Neutral,Neutral,,,Agree,,,Strongly Agree,Strongly Agree,Agree,Agree,"If we are talking about open source project, a PR can be rejected because the developer creating the PR did not communicate with the team in charge of the project. 
- Maybe that bug/feature/refactoring was assigned to somebody else. 
- Maybe that bug/feature/refactoring is not needed or has not been discussed within the project.

I have also seen some PR rejected because it introduces a new programming language (like Kotlin, when the whole project is in Java)",The number 1 IMO is communication on proper channel with the team in charge of the project.
OSS,8/15/20 21:12,8/15/20 21:20,444,8/15/20 21:20,Developer,,3-5 years,Yes,Yes,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Rejected due to various upcoming ballerina changes,
OSS,8/15/20 21:21,8/15/20 21:24,177,8/15/20 21:24,Developer,,>10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Disagree,Agree,Agree,Agree,Neutral,Disagree,Strongly Disagree,Disagree,Disagree,Agree,Neutral,Neutral,Agree,Agree,Agree,,
OSS,8/15/20 21:20,8/15/20 21:25,271,8/15/20 21:25,Developer,,3-5 years,Yes,Yes,Neutral,Disagree,Disagree,Strongly Disagree,Neutral,Neutral,Agree,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/15/20 21:25,8/15/20 21:33,442,8/15/20 21:33,Technical Lead,,3-5 years,Yes,Yes,Disagree,Agree,Disagree,Agree,Agree,Agree,Strongly Agree,Disagree,Agree,Neutral,Disagree,Neutral,Agree,Agree,Agree,Agree,,,,,,,,Primarily due to conflicting team conventions. Where at the contributor is under the assumption their refactoring approach works along with already in place coding style/conventions.,"It doesn't introduce bugs, it doesn't impact performance, it maintains or enhances readability, and it conforms to the teams/repository coding style."
OSS,8/15/20 21:36,8/15/20 21:39,170,8/15/20 21:39,Developer,,3-5 years,Yes,Yes,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Agree,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Agree,,
OSS,8/15/20 21:39,8/15/20 21:42,167,8/15/20 21:42,Sotware Architect,,>10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Strongly Agree,Agree,Neutral,Disagree,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Agree,Strongly Agree,Agree,Neutral,Agree,Neutral,Strongly Agree,,"They need to be highly focused on solving a specific issue, and solving it well."
OSS,8/15/20 21:35,8/15/20 21:53,1050,8/15/20 21:53,Others? Please specify.,CEO,>10 years,Yes,Yes,Agree,Agree,Agree,Neutral,Agree,Strongly Agree,Agree,Strongly Agree,Neutral,Disagree,Neutral,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Agree,,High test coverage and no change to external interface
OSS,8/15/20 22:05,8/15/20 22:09,240,8/15/20 22:09,Developer,,< 3,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Agree,Agree,Agree,Neutral,Agree,Neutral,Neutral,Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Strongly Agree,Agree,,Wide discussions with members of the team
OSS,8/15/20 21:58,8/15/20 22:16,1071,8/15/20 22:16,Developer,,6-10 years,Yes,Yes,Agree,Agree,Strongly Agree,Neutral,Agree,Neutral,Strongly Agree,Neutral,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,,Disagree,Agree,Strongly Agree,Agree,Neutral,Agree,Strongly Agree,Agree,Neutral,Agree,"I think that PRs could have implicit value based on the perceived authority of the owner of that PR. In the other words, more respected developers tend to have more approved PRs because reviewers might often just trust the PR author because ""He/She knows what he/she is doing. I trust them. LGTM/Approval. Now let's have a pizza already.""
IMHO, increasing the number of reviewers might help to mitigate that risk.",
OSS,8/15/20 23:01,8/15/20 23:14,758,8/15/20 23:14,Sotware Architect,,< 3,Yes,Yes,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Neutral,Neutral,Disagree,Disagree,Agree,Disagree,Disagree,Neutral,Neutral,Agree,Agree,Neutral,Agree,Agree,Agree,Agree,,
OSS,8/15/20 23:38,8/15/20 23:44,317,8/15/20 23:44,Sotware Architect,,>10 years,Yes,Yes,Disagree,Agree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Neutral,Agree,Strongly Disagree,,Agree,Disagree,Strongly Disagree,Strongly Disagree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,,
OSS,8/16/20 0:12,8/16/20 0:17,265,8/16/20 0:17,Technical Lead,,>10 years,Yes,Yes,Neutral,Agree,Agree,Strongly Agree,Disagree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Neutral,Agree,Disagree,Agree,Agree,Agree,Agree,"I don't have the time to fullfill all formal requirements like signing an contributer agreement, have 100% code  coverage and document everything with complete javadoc.",Make the architecture better without breaking backwards compatibility.
OSS,8/16/20 1:03,8/16/20 1:09,329,8/16/20 1:09,Others? Please specify.,Student Computer Science,< 3,Yes,Yes,Agree,Neutral,Neutral,Disagree,Agree,Strongly Agree,Neutral,Strongly Agree,Agree,Neutral,Agree,Agree,Neutral,Disagree,Agree,Neutral,Agree,,Agree,,Neutral,Agree,Agree,,
OSS,8/16/20 1:13,8/16/20 1:19,338,8/16/20 1:19,Sotware Architect,,3-5 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Agree,Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,Consistency in a codebase
OSS,8/16/20 1:57,8/16/20 2:06,538,8/16/20 2:06,Sotware Architect,,6-10 years,Yes,Yes,Neutral,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Neutral,Agree,Agree,Strongly Agree,Neutral,Strongly Agree,Agree,Disagree,Neutral,Agree,Neutral,Neutral,Neutral,Disagree,,"Discussion. A large panel of the proposed reasons should be resolved by discussion between the author(s) of the PR and the core-team of the project.

For example, rejecting a PR because it misses testing cases is strange. If this issue is pointed out, the author can add missing tests and make up to the project requirements.
"
OSS,8/16/20 2:09,8/16/20 2:20,626,8/16/20 2:20,Technical Lead,,3-5 years,Yes,Yes,Disagree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Agree,Neutral,Agree,Strongly Agree,,Neutral,Agree,Agree,Strongly Disagree,,,Neutral,Disagree,Disagree,Disagree,"* Lack of time to review thoroughly (due to upcoming deadline/end of sprint)
* Don't add functional value from the customer/CEO perspective
* Controversial code style","* Specific & limited scope
* Proper separation of steps per commit (allows incremental review) "
OSS,8/16/20 2:26,8/16/20 2:30,235,8/16/20 2:30,Developer,,3-5 years,Yes,Yes,Neutral,Agree,Neutral,Strongly Agree,Disagree,Strongly Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Neutral,Strongly Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Agree,Disagree,Agree,Agree,,"Making code better, while keeping the same performance/funcionality"
OSS,8/16/20 2:30,8/16/20 2:36,347,8/16/20 2:36,Others? Please specify.,Scientist/Researcher,3-5 years,Yes,Yes,Disagree,Agree,Agree,Neutral,Disagree,Agree,Disagree,Agree,Disagree,Disagree,Agree,Agree,Neutral,Disagree,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,,"1. Clear goal and boundaries (i.e. does not contain lots of other random changes)
2. Adherence to existing guidelines and code style
3. Correctly adds and updates necessary unit/integration tests to demonstrate low likelihood of regressions"
OSS,8/16/20 1:51,8/16/20 2:40,2995,8/16/20 2:40,Developer,,3-5 years,Yes,Yes,Strongly Agree,Strongly Agree,Agree,Strongly Disagree,Strongly Agree,Strongly Agree,Agree,,Agree,Disagree,Strongly Agree,Strongly Agree,Neutral,Strongly Disagree,,Agree,Agree,Agree,,Disagree,Disagree,Agree,Agree,"1. lack of discussion of the refactoring plan
    The contributor should have a discussion with maintainers **before** submitting a refactoring PR. Maintainers may not like contributors who send lots of changes without talking to them before.
2. too many 'reject & resubmit'
    Endless 'request changes' usually ruin the contributor's patience, leaving the proposed refactoring discontinued.
","1. should have clear goals
2. should have minimal changes, which makes it easy to review and understand
    * do not touch unrelated code
    * no unnecessary whitespace changes
    * avoid using complex design patterns
"
OSS,8/16/20 2:31,8/16/20 2:41,566,8/16/20 2:41,Developer,,6-10 years,Yes,Yes,Agree,Agree,Neutral,Disagree,Strongly Agree,Agree,Neutral,Neutral,Agree,Strongly Agree,Neutral,Neutral,Neutral,Strongly Disagree,Neutral,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Disagree,Agree,,
OSS,8/16/20 3:23,8/16/20 3:33,584,8/16/20 3:33,Developer,,3-5 years,Yes,Yes,Agree,Strongly Agree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,Disagree,Disagree,Agree,Strongly Agree,Neutral,Disagree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Disagree,Agree,Agree,It is not high priority,"Should be clear that it does not alter the original behaviour, should be relatively easy to interpret the changes. the benefit of the refactor should be clear"
OSS,8/16/20 3:43,8/16/20 3:58,924,8/16/20 3:58,Developer,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Disagree,Disagree,Neutral,Agree,Agree,Strongly Agree,Neutral,Neutral,Agree,Agree,Agree,Disagree,Agree,Agree,Agree,Agree,Large changes are hard to review so reviewers hesitate from reviewing. After sometime proposed changes stale either due to codebase moving forward or lose of interest and enthusiasm from contributor.,"* clear goal with recognized value
* manageable size of changes for review 
* acceptable level of contribution quality (code style, tests, benchmarks according to project's usual practices)
* fast feedback from reviewers
* fast feedback and adjustments from contributor"
OSS,8/16/20 4:26,8/16/20 4:29,154,8/16/20 4:29,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Agree,Neutral,Strongly Agree,Disagree,Agree,Neutral,Disagree,Disagree,Neutral,Strongly Disagree,Disagree,Disagree,Neutral,Disagree,Strongly Agree,Agree,Agree,Strongly Agree,Neutral,Agree,,
OSS,8/16/20 4:26,8/16/20 4:30,212,8/16/20 4:30,Others? Please specify.,CTO,>10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Agree,Disagree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,"Above list is pretty comprehensive, can't think of any other reason.",Any refactoring should ultimately bring the code base to a lower-complexity state with both increased/generalized functionality and better performance.
OSS,8/16/20 4:33,8/16/20 4:35,153,8/16/20 4:35,Developer,,>10 years,Yes,Yes,Neutral,Agree,Agree,Disagree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Disagree,Neutral,Neutral,Strongly Disagree,Disagree,Disagree,Neutral,Agree,Neutral,Disagree,Disagree,Disagree,Agree,Agree,,
OSS,8/16/20 4:52,8/16/20 4:56,262,8/16/20 4:56,Others? Please specify.,CEO,6-10 years,Yes,Yes,Neutral,Agree,Disagree,Neutral,Disagree,Agree,Neutral,Neutral,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,"Bulk changes wo/ benefit, personal preferences over measured quality increase","Measurements before/after (performance, code smells etc.)

Discussion upfront

Well split commits"
OSS,8/16/20 5:11,8/16/20 5:14,158,8/16/20 5:14,Developer,,3-5 years,Yes,Yes,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Agree,Disagree,Agree,Agree,Agree,Agree,Neutral,,
OSS,8/16/20 5:15,8/16/20 5:26,656,8/16/20 5:26,Developer,,>10 years,Yes,Yes,Neutral,Strongly Disagree,Disagree,Neutral,Strongly Disagree,Neutral,Disagree,Neutral,Neutral,Disagree,Neutral,Neutral,Disagree,Neutral,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Neutral,"JetBrains doesn't use GitHub's infrastructure for accepting proposed pull-requests, they simply cherry-pick commits of a pull-request and reject it on GitHub. All the commits eventually end up in Intellij IDEA's code base",New tests
OSS,8/16/20 5:39,8/16/20 5:43,257,8/16/20 5:43,Technical Lead,,>10 years,Yes,Yes,Agree,Agree,Agree,Disagree,Disagree,Disagree,Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Disagree,,
OSS,8/16/20 5:54,8/16/20 6:10,932,8/16/20 6:10,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Disagree,Disagree,Agree,Strongly Agree,Agree,Agree,Disagree,Agree,Agree,Neutral,Agree,Agree,Neutral,Disagree,Neutral,Agree,Strongly Disagree,Disagree,Agree,,"Improve code/API usability.
Fix design problems that keeps project from evolve."
OSS,8/16/20 7:22,8/16/20 7:25,191,8/16/20 7:25,Technical Lead,,6-10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Neutral,Agree,Strongly Agree,Neutral,Agree,Neutral,Disagree,Agree,Agree,Strongly Agree,Disagree,Agree,,Disagree,Agree,Neutral,Agree,Disagree,Agree,Agree,,Increased maintainability.
OSS,8/16/20 7:43,8/16/20 7:49,312,8/16/20 7:49,Technical Lead,,3-5 years,Yes,Yes,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Agree,Agree,Disagree,Disagree,Agree,Agree,Agree,Neutral,Agree,Agree,Neutral,Agree,Strongly Agree,,"To speak broadly, understanding the working context and what issues are and aren’t relevant. If this is an API/ABI, a refactor generally can’t touch those interfaces. If this is performance sensitive, testing needs to be done to ensure there aren’t significant drawbacks. How significant would again depend on the context of the project.
In general, there can be issues with people, especially in the context of open source work, doing large refractors without consulting with the primary developers to ascertain what contexts are important and what other changes are planned or already in progress such that their work would be declined."
OSS,8/16/20 10:24,8/16/20 10:28,202,8/16/20 10:28,Technical Lead,,6-10 years,Yes,Yes,Strongly Agree,Agree,Strongly Agree,Disagree,Neutral,Agree,Agree,Agree,Agree,Disagree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,Strongly Disagree,Disagree,Disagree,Agree,Strongly Agree,,It should make sense.
OSS,8/16/20 11:06,8/16/20 11:09,227,8/16/20 11:09,Others? Please specify.,Engineering Director,>10 years,Yes,Yes,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Strongly Agree,Agree,Agree,Disagree,Agree,Strongly Disagree,Agree,Agree,Agree,Disagree,Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,Lack of good maintainers. The most typical reason is desire to keep status quo.,Talked first with the maintainer of the project.
OSS,8/16/20 11:14,8/16/20 11:22,458,8/16/20 11:22,Developer,,3-5 years,Yes,Yes,Neutral,Agree,Disagree,Strongly Agree,Disagree,Agree,Neutral,Agree,Agree,Neutral,Neutral,Strongly Agree,Neutral,Agree,Disagree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,,"Improving code quality (readability, extensibility) if no new bugs appear"
OSS,8/16/20 12:04,8/16/20 12:10,340,8/16/20 12:10,Developer,,6-10 years,Yes,Yes,Agree,Strongly Agree,,,Disagree,,,Strongly Agree,,Agree,Strongly Agree,Agree,Agree,,Disagree,,,Agree,Strongly Agree,Neutral,Disagree,Disagree,Agree,,"do not try to format the existing code. Reviewing code becomes increasingly complex if the sender has formatted non-relevant code.
"
OSS,8/16/20 12:20,8/16/20 12:23,208,8/16/20 12:23,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Disagree,Agree,Strongly Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Neutral,Strongly Agree,Neutral,Agree,Neutral,,
OSS,8/16/20 12:22,8/16/20 12:31,538,8/16/20 12:31,Technical Lead,,< 3,Yes,Yes,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Neutral,Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,,"That the submitter can clearly communicate how the changes affect the system as a user/consumer, developer/contributor, administrator/maintainer of systems, and custodians/maintainers of the code. Can articulate how something can be tested even if they do not know how to create an automated test for it. Breaking down changes into smaller deltas (via pull requests) rather than one massive refactor. Time is our most important commodity and given the nature of refactor work its highly subject to accidental breakage the code must be reviewed very carefully, reading multiple 100 line pull requests are often easier on the reviewer than a 1000 line pull request."
OSS,8/16/20 12:10,8/16/20 12:32,1342,8/16/20 12:32,Sotware Architect,,>10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Strongly Agree,Disagree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Strongly Agree,Agree,,,Agree,Agree,,
OSS,8/16/20 12:46,8/16/20 12:51,330,8/16/20 12:51,Others? Please specify.,Student,< 3,Yes,Yes,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Neutral,Agree,Agree,Agree,Agree,Disagree,Disagree,Neutral,Strongly Agree,Neutral,Disagree,Neutral,Agree,Agree,Agree,Agree,,"They are small and non-obtrusive, i.e. do not cause problems for other features or fixes that are being developed concurrently/on a different branch."
OSS,8/16/20 13:29,8/16/20 13:44,892,8/16/20 13:44,Technical Lead,,3-5 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Agree,Agree,Neutral,,Agree,Agree,Strongly Agree,Agree,,Accepted refactorings that I have encountered often improved readability or performance in a significant way.
OSS,8/16/20 14:47,8/16/20 15:10,1377,8/16/20 15:10,Developer,,6-10 years,Yes,Yes,Agree,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Disagree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,,
OSS,8/16/20 20:38,8/16/20 20:42,211,8/16/20 20:42,Developer,,3-5 years,Yes,Yes,Agree,Agree,Agree,Neutral,Neutral,Agree,Neutral,Strongly Agree,Neutral,Neutral,Agree,Strongly Agree,Neutral,Disagree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Agree,,
OSS,8/16/20 20:54,8/16/20 20:56,176,8/16/20 20:56,Technical Lead,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Agree,Strongly Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,,#NAME?
OSS,8/16/20 20:50,8/16/20 20:57,394,8/16/20 20:57,Developer,,< 3,Yes,Yes,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Agree,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,,
OSS,8/16/20 20:46,8/16/20 21:02,984,8/16/20 21:02,Sotware Architect,,>10 years,Yes,Yes,Agree,Neutral,Neutral,Disagree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,Neutral,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,,On purpose and meet the code standard.
OSS,8/16/20 21:09,8/16/20 21:13,237,8/16/20 21:13,Developer,,< 3,Yes,Yes,Agree,Disagree,Agree,Neutral,Disagree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Agree,,
OSS,8/16/20 21:21,8/16/20 21:23,129,8/16/20 21:23,Developer,,< 3,Yes,Yes,Neutral,Agree,Agree,Neutral,,,Agree,Neutral,Agree,Neutral,,Disagree,Disagree,Disagree,Disagree,Agree,,Neutral,Neutral,,,Agree,Disagree,,
OSS,8/16/20 22:52,8/16/20 23:04,695,8/16/20 23:04,Developer,,< 3,Yes,Yes,Neutral,Agree,Disagree,Neutral,Neutral,,Agree,Neutral,Agree,Neutral,Neutral,Disagree,Neutral,Agree,,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Disagree,Neutral,Neutral,,"1) They follow coding conventions. 
2) They do not lead to any build failures on the codebase and so they all build successfully .
3) Their PRs follow the pull request tips and naming."
OSS,8/16/20 22:56,8/16/20 23:04,525,8/16/20 23:04,Developer,,6-10 years,Yes,Yes,Disagree,Neutral,Strongly Agree,Neutral,Neutral,Neutral,Agree,Strongly Agree,Neutral,Neutral,Agree,Disagree,,,Neutral,Agree,Agree,Strongly Agree,,Agree,Agree,Strongly Agree,Neutral,"I experienced a lot of times that the authors want to get paid to review and merge PRs. 
Typically as a freelancer I commit to OSS software that is used by my customer and has bugs. If the author want to get paid for every PR this usually ends in a fork and you never upstream your changes anymore. You really have to work for a very open minded company to enforce upstream changes.","Testing!
Most PRs on my open source projects have been rejected or got stale because the contributor simply does not know how to test or was to lazy to implement the tests.
Normally I work around that by choosing the most active contributor and increase his/her privileges. As soon as they have to take care of that project they'll add tests and check for code quality. Only if they just submit the PRs they're not interested in testing ;)"
OSS,8/16/20 23:00,8/16/20 23:05,283,8/16/20 23:05,Developer,,3-5 years,Yes,Yes,Neutral,Agree,Agree,Disagree,Neutral,Agree,Strongly Disagree,Neutral,Disagree,Neutral,Strongly Agree,Agree,Disagree,Disagree,Strongly Agree,Neutral,Agree,Disagree,Agree,Agree,Neutral,Agree,Agree,,Discussion about that problem should exists before PR come
OSS,8/16/20 22:55,8/16/20 23:05,651,8/16/20 23:05,Developer,,>10 years,Yes,Yes,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Agree,Disagree,Strongly Disagree,Agree,Strongly Agree,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Disagree,Strongly Agree,Strongly Disagree,Strongly Agree,Disagree,,"no bugs, very clear designs, patterns and namings so that the next guy can handle the code, does not duplicate another part of the code or logic, no performance loss, all change impacts identified (usage check), domain issue is resolved in a good way for the end user, no useless code (must answer a requirement), and code has been properly tested"
OSS,8/16/20 23:18,8/16/20 23:23,337,8/16/20 23:23,Developer,,>10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Strongly Agree,Strongly Agree,Disagree,,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Disagree,Strongly Disagree,Neutral,Agree,Disagree,Agree,Neutral,"The most often reason we reject contributions is that the person has tried to solve a problem for themselves and do not know how to make this general to wider audience.

We always aim to ake sure the code in our graphql-java library is widely  applicable - at the expense of solving some specific problems (like json handling / web handling ) more easily.","Generic problem solved

Small enough that is a not to hard

Unit tests 

Its not just personal preference"
OSS,8/16/20 23:18,8/16/20 23:24,329,8/16/20 23:24,Technical Lead,,>10 years,Yes,Yes,Agree,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Disagree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Agree,Agree,Agree,Agree,Disagree,Agree,,
OSS,8/16/20 23:27,8/16/20 23:35,459,8/16/20 23:35,Developer,,6-10 years,Yes,Yes,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,,
OSS,8/16/20 23:28,8/16/20 23:37,551,8/16/20 23:37,Developer,,6-10 years,Yes,Yes,Disagree,Disagree,Strongly Disagree,Disagree,Disagree,Neutral,Strongly Disagree,Disagree,Neutral,Agree,Neutral,Disagree,Agree,Agree,Disagree,Disagree,Disagree,Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Neutral,,
OSS,8/16/20 23:47,8/16/20 23:59,691,8/16/20 23:59,Sotware Architect,,>10 years,Yes,Yes,Agree,Neutral,Disagree,Disagree,Neutral,Disagree,Disagree,Agree,Disagree,Strongly Disagree,Disagree,Neutral,Agree,Strongly Disagree,,Disagree,,,,Neutral,Neutral,Disagree,Neutral,Refactoring contributions should be a clearly defined improvement which does not change behavior. Such as renaming or moving classes. Changes with potential side effects should be minimalistic and done in a separate PR.,Small/isolated. Obvious improvements. Small or no changes to unit tests.
OSS,8/17/20 0:22,8/17/20 0:25,162,8/17/20 0:25,Technical Lead,,6-10 years,Yes,Yes,Agree,Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Agree,Neutral,Strongly Agree,Agree,Neutral,Agree,Agree,Agree,Agree,Agree,Strongly Agree,,"Improve or maintain the level of maintainability of the project as a whole, is consistent with the project overall, and provides demonstrable benefit to the project"
OSS,8/17/20 0:31,8/17/20 0:38,431,8/17/20 0:38,Developer,,3-5 years,Yes,Yes,Agree,Disagree,Neutral,Disagree,Disagree,Neutral,Agree,Agree,Strongly Disagree,Agree,Neutral,Neutral,Agree,Disagree,Agree,Agree,Neutral,Disagree,Agree,Neutral,Neutral,Disagree,Disagree,,
OSS,8/17/20 0:51,8/17/20 0:54,214,8/17/20 0:54,Developer,,< 3,Yes,Yes,Agree,Agree,Strongly Agree,Agree,Agree,Agree,Agree,Strongly Disagree,Neutral,Agree,Agree,Agree,Agree,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Neutral,Neutral,Neutral,Neutral,Neutral,,
OSS,8/17/20 1:48,8/17/20 1:50,142,8/17/20 1:50,Developer,,< 3,Yes,Yes,Agree,Agree,Agree,Strongly Disagree,Agree,Disagree,Strongly Agree,Agree,Disagree,Disagree,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,,
OSS,8/17/20 2:05,8/17/20 2:12,397,8/17/20 2:12,Sotware Architect,,>10 years,Yes,Yes,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Disagree,Disagree,Neutral,Neutral,Neutral,Disagree,Disagree,Disagree,Neutral,Disagree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,"Decision maker does not understand the purpose and ""enabling"" role of the change
in order to affect longer-term changes beneficial for the project, or simply does not care about sustaining software quality.
","Enabling *other* (followup) changes that actually improve something concrete/quantifiable.
"
OSS,8/17/20 2:34,8/17/20 2:38,279,8/17/20 2:38,Developer,,< 3,Yes,Yes,Agree,Strongly Agree,,Strongly Disagree,Disagree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Agree,Strongly Agree,Agree,Disagree,Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Agree,Neutral,Agree,Agree,,"Matches current project standards
Is an overall improvement
Does not require too much effort to merge"
OSS,8/17/20 3:02,8/17/20 3:07,337,8/17/20 3:07,Sotware Architect,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Neutral,Neutral,Neutral,Refactorings taht are just plain unneeded or unwanted.,
OSS,8/17/20 3:33,8/17/20 3:38,313,8/17/20 3:38,Sotware Architect,,>10 years,Yes,Yes,Strongly Agree,Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Disagree,Disagree,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Neutral,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,,"good code  readability
improve simplicity
"
OSS,8/17/20 4:36,8/17/20 4:39,132,8/17/20 4:39,Developer,,6-10 years,Yes,Yes,Neutral,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Strongly Agree,Disagree,Agree,Disagree,Neutral,Agree,Agree,Disagree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,,
OSS,8/17/20 2:41,8/17/20 5:06,8669,8/17/20 5:06,Developer,,>10 years,Yes,Yes,Strongly Disagree,Agree,Strongly Agree,Disagree,Strongly Agree,Agree,Agree,Agree,Neutral,Disagree,Neutral,Disagree,Disagree,Strongly Disagree,Neutral,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Neutral,Agree,,testing
OSS,8/17/20 5:40,8/17/20 5:44,245,8/17/20 5:44,Technical Lead,,>10 years,Yes,Yes,Agree,Strongly Agree,Neutral,Agree,Agree,Disagree,Strongly Agree,Agree,Neutral,Strongly Disagree,Disagree,Agree,Disagree,Strongly Disagree,Strongly Disagree,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,,,
OSS,8/17/20 6:18,8/17/20 6:22,243,8/17/20 6:22,Developer,,6-10 years,Yes,Yes,Agree,Agree,Neutral,Neutral,Neutral,Agree,Strongly Agree,Agree,Disagree,,Disagree,Agree,Neutral,Neutral,Disagree,Strongly Agree,Neutral,Neutral,,Agree,Agree,Disagree,Agree,,Extremely high level of awareness of the overal project context. Most rejections come from the lack of exposure to a wide range of details. 
OSS,8/17/20 6:20,8/17/20 6:22,151,8/17/20 6:22,Sotware Architect,,6-10 years,Yes,Yes,Neutral,Disagree,Neutral,Disagree,Neutral,Disagree,Strongly Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Neutral,Disagree,Neutral,Neutral,Agree,Agree,,They do not change the behaviour of the system nor the code style.
OSS,8/17/20 6:30,8/17/20 6:42,731,8/17/20 6:42,Developer,,3-5 years,Yes,Yes,Neutral,Strongly Disagree,Neutral,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Strongly Agree,Agree,Disagree,Disagree,Agree,Disagree,Disagree,Strongly Agree,Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Disagree,Disagree,,"My contribution was rejected because it did not fix the bug in the preferred way. At the end the solution that the pull request viewer provided was a more valid solution then mine. Maybe the pull request viewer could have given me the chance to implement the solution the way they preferred as I had already worked on the topic.

Instead the reviewer just implemented the solution and superseded my pull request."
OSS,8/17/20 6:30,8/17/20 6:46,926,8/17/20 6:46,Developer,,6-10 years,Yes,Yes,Strongly Disagree,Strongly Disagree,Strongly Disagree,Disagree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Strongly Agree,Agree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Disagree,Neutral,Disagree,,Depending on different code maintainers' standard which could vary from time to time.
OSS,8/16/20 3:07,8/17/20 7:35,102468,8/17/20 7:35,Sotware Architect,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,,
OSS,8/17/20 7:30,8/17/20 7:36,353,8/17/20 7:36,Others? Please specify.,Security Engineer,6-10 years,Yes,Yes,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Disagree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Agree,Neutral,Neutral,,,
OSS,8/17/20 7:56,8/17/20 8:03,389,8/17/20 8:03,Developer,,6-10 years,Yes,Yes,Strongly Agree,Strongly Agree,Disagree,Neutral,Agree,Agree,Disagree,Agree,Disagree,Strongly Disagree,Agree,Agree,Neutral,Disagree,Agree,Agree,Agree,Neutral,Disagree,Neutral,Neutral,Neutral,Neutral,,maintains current functionality and improves readability without introducing bugs
OSS,8/17/20 8:25,8/17/20 8:29,244,8/17/20 8:29,Developer,,< 3,Yes,Yes,Agree,Agree,Neutral,Disagree,Neutral,Neutral,Neutral,Agree,Agree,Strongly Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Neutral,Strongly Agree,Agree,Agree,Agree,Neutral,Neutral,"Including IDE specific configuration files into a .gitignore,",
OSS,8/17/20 8:36,8/17/20 8:39,187,8/17/20 8:39,Developer,,3-5 years,Yes,Yes,Agree,Agree,Neutral,Disagree,Neutral,Neutral,Strongly Agree,Agree,Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Disagree,Disagree,Neutral,Neutral,Agree,Agree,Neutral,Agree,Neutral,,
OSS,8/17/20 8:59,8/17/20 9:01,129,8/17/20 9:01,Developer,,6-10 years,Yes,Yes,Neutral,Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,,
OSS,8/17/20 9:09,8/17/20 9:12,137,8/17/20 9:12,Developer,,< 3,Yes,Yes,Disagree,Neutral,Neutral,Disagree,Agree,Agree,Strongly Agree,Disagree,Agree,,Agree,Disagree,Agree,Disagree,Disagree,Agree,,,,,,,,,
OSS,8/17/20 9:15,8/17/20 9:22,386,8/17/20 9:22,Developer,,>10 years,Yes,Yes,Disagree,Agree,Neutral,Disagree,Neutral,Neutral,Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Agree,Neutral,,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Neutral,Neutral,"Any of these reasons might apply, but there are always tradeoffs, depending on the original goal of the refactoring.","My experience has been that project owners like to see a patch that they cannot distinguish from the original code in terms of style and ""feel."" I have experienced this reaction to changes made to my own code by others."
OSS,8/17/20 10:06,8/17/20 10:10,257,8/17/20 10:10,Developer,,6-10 years,Yes,Yes,Agree,Agree,Neutral,Agree,Agree,Neutral,Agree,Agree,Disagree,Neutral,Neutral,Agree,Strongly Agree,Neutral,Disagree,Disagree,Neutral,Agree,Agree,Neutral,Neutral,Agree,Agree,,"Making a change carries some risk of introducing bugs and errors. Any refactor should therefore carry sufficient benefit through simplification, improved styling or readability, or performance to merit that change."
OSS,8/17/20 10:21,8/17/20 10:29,531,8/17/20 10:29,Developer,,3-5 years,Yes,Yes,Agree,Agree,Neutral,Neutral,Disagree,Neutral,Disagree,Agree,Neutral,Disagree,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,,I think it is important to discuss refactoring changes with core contributors beforehand. Unsolicited refactorings seem likely to contain faulty assumptions about the system.
OSS,8/17/20 10:38,8/17/20 10:42,291,8/17/20 10:42,Sotware Architect,,< 3,Yes,Yes,Agree,Strongly Agree,Agree,Disagree,Neutral,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Neutral,Agree,Strongly Disagree,Strongly Disagree,Agree,Neutral,Disagree,Strongly Disagree,Disagree,Agree,Strongly Disagree,Agree,Neutral,Lack of suitable documentation / Doesn't improve documentation while simultaneously upending other developer's mental models.,"Adherence to the project style guide. (Including clauses such as ""No unnecessary whitespace changes"" as much as it hurts.)"
OSS,8/17/20 7:03,8/17/20 12:24,19234,8/17/20 12:24,Sotware Architect,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Agree,Agree,Agree,Disagree,Agree,Agree,Neutral,Strongly Agree,Agree,Strongly Agree,Agree,Agree,Agree,"Insufficient automated test coverage to demonstrate the proposed contribute does not change the current behavior. If this is the case, tests should be written and contributed against the unmodified code base.","Refactoring, by definition, must not change the external behavior. Code changes which do this are not refactoring and are rejected."
OSS,8/17/20 14:04,8/17/20 14:11,395,8/17/20 14:11,Developer,,>10 years,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Neutral,Agree,Neutral,Agree,Agree,Agree,Strongly Disagree,Strongly Disagree,,Agree,Agree,Agree,,,,Agree,,,
OSS,8/17/20 15:09,8/17/20 15:20,671,8/17/20 15:20,Developer,,< 3,Yes,Yes,Disagree,Disagree,Disagree,Neutral,Disagree,Disagree,Neutral,Neutral,Neutral,Agree,Agree,Disagree,Disagree,Disagree,Neutral,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Disagree,"In my experience, unsolicited refactoring contributions are typically rejected due to: (1) the effort required from maintainers to review the changes, given limited availability; (2) the maintainer considers them of little value since they don't fix bugs or introduce new features; (3) maintainers believe they pollute the version history.",Refactoring contributions have a higher chance of being accepted if they: (1) are submitted by existing contributors instead of by someone new to the project; (2) are well described and justified; (3) are high-quality and apply best practices of version control (e.g. atomic commits with descriptive messages) that facilitate the reviewing process.
OSS,8/17/20 15:49,8/17/20 15:51,160,8/17/20 15:51,Developer,,6-10 years,Yes,Yes,Strongly Agree,Strongly Agree,Agree,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Strongly Disagree,Agree,Neutral,Neutral,Disagree,Neutral,Disagree,Strongly Agree,Neutral,Disagree,Agree,Neutral,Agree,Agree,,
Friends,8/10/20 7:22,8/10/20 7:28,339,8/10/20 7:28,Developer,,,Yes,Yes,Agree,Neutral,Strongly Agree,Neutral,Agree,Disagree,Disagree,Disagree,,,,Agree,,,,Disagree,,Neutral,,Strongly Agree,,,,,
Friends,8/10/20 7:20,8/10/20 7:32,721,8/10/20 7:32,Developer,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Agree,Neutral,Neutral,Agree,Agree,Strongly Agree,Neutral,Strongly Disagree,Neutral,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Neutral,Neutral,Strongly Agree,Neutral,Same refactoring concept are not applied to all applicable places.,"For non-realtime applications, readability is the key to maintenanble project.
 

 Best refactoring should improve readability and/or decrease technical debt."
Friends,8/10/20 11:40,8/10/20 11:46,340,8/10/20 11:46,Developer,,< 3,Yes,Yes,Agree,Agree,Neutral,Neutral,Disagree,Disagree,Disagree,Agree,Strongly Agree,Agree,Disagree,Agree,Agree,Agree,Neutral,Agree,Neutral,Neutral,Agree,Neutral,Neutral,Neutral,Neutral,,
Friends,8/10/20 11:59,8/10/20 12:04,302,8/10/20 12:04,Developer,,< 3,Yes,Yes,Strongly Agree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Neutral,Strongly Disagree,Agree,Agree,Neutral,Agree,Neutral,Neutral,Agree,Neutral,Neutral,Agree,Agree,Agree,Disagree,Neutral,Refactoring phase is not considered as critical as testing phase.,
Friends,8/10/20 11:55,8/10/20 12:07,679,8/10/20 12:07,Sotware Architect,,>10 years,Yes,Yes,Neutral,Strongly Agree,Strongly Agree,Disagree,Disagree,Strongly Disagree,Neutral,Agree,Agree,Strongly Agree,Agree,Neutral,Neutral,Disagree,Disagree,Agree,Agree,Agree,Strongly Agree,Disagree,Disagree,Disagree,Disagree,Architecture level refactoring often introduce conflict of cost(both money and time) that has ambiguous ROI because return is ofthen based on assumptions. Module level refactoring often has problems with non-functional requarements such as robustnes because it is very hard to cover them in integration testing. Function level refactoring again have problems with non functional requarements because of level of test coverage and risk of accumulated bugs.,ROI and measurements before and after in characteristics that refactoring should result of.
Friends,8/10/20 12:23,8/10/20 12:26,140,8/10/20 12:26,Developer,,3-5 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Agree,Agree,Disagree,Neutral,Neutral,Agree,Agree,,
Friends,8/10/20 12:28,8/10/20 12:32,202,8/10/20 12:32,Sotware Architect,,>10 years,Yes,Yes,Agree,Neutral,Strongly Agree,Neutral,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Disagree,Neutral,Strongly Agree,Neutral,Disagree,Disagree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Agree,,Design aligned with the project
Friends,8/10/20 12:28,8/10/20 12:33,319,8/10/20 12:33,Developer,,< 3,Yes,Yes,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Strongly Agree,Disagree,Agree,Disagree,Neutral,Agree,Strongly Agree,Strongly Agree,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Agree,,
Friends,8/10/20 15:34,8/10/20 15:36,135,8/10/20 15:36,Developer,,< 3,Yes,Yes,Disagree,Neutral,Strongly Agree,Disagree,Agree,Neutral,Agree,Agree,Strongly Agree,Disagree,Strongly Agree,Strongly Agree,Agree,Disagree,Disagree,Agree,Agree,,,Agree,Neutral,Neutral,Neutral,,
Friends,8/10/20 15:21,8/10/20 15:47,1576,8/10/20 15:47,Developer,,3-5 years,Yes,Yes,Agree,Strongly Agree,Neutral,Strongly Disagree,Disagree,Neutral,Strongly Agree,Disagree,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Agree,Neutral,Disagree,Neutral,Disagree,Agree,Agree,Neutral,Agree,Neutral,,"Reduced complexity, improved maintainability. Ideally the contributions help adding future functionality."
Friends,8/10/20 18:23,8/10/20 18:35,707,8/10/20 18:35,Developer,,,Yes,Yes,Agree,Strongly Agree,Neutral,Strongly Disagree,Strongly Disagree,Neutral,Agree,Strongly Agree,Agree,,Disagree,Strongly Agree,Agree,Agree,,Agree,Disagree,,Agree,,,Disagree,Disagree,,
Friends,8/11/20 4:18,8/11/20 4:29,659,8/11/20 4:29,Developer,,< 3,Yes,Yes,Agree,Agree,Agree,Neutral,Agree,Agree,Disagree,Agree,Neutral,Disagree,Agree,Agree,,Disagree,Disagree,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Agree,Strongly Agree,Agree,,"simple
 - smart
 - useful
 - clear
 - consistent"
Friends,8/11/20 5:58,8/11/20 6:05,418,8/11/20 6:05,Developer,,3-5 years,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Disagree,Agree,Strongly Agree,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,
Social Media,8/7/20 9:20,8/7/20 9:29,523,8/7/20 9:29,Sotware Architect,,6-10 years,Yes,Yes,Disagree,Strongly Agree,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Disagree,Strongly Agree,Strongly Disagree,Neutral,,Strongly Agree,Strongly Disagree,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Neutral,,Agree,Disagree,Strongly Disagree,Neutral,"Most refactorings we ever considered in my team were rejected before they were implemented: Architects and Engineers would agree that they are important, but there's not enough budget for non-functional changes.","They have some positive effect on the user experience; which IMO most of the time should be less bugs, due to better code design after the refactoring took place."
Social Media,8/7/20 13:24,8/7/20 13:28,233,8/7/20 13:28,Developer,,3-5 years,Yes,Yes,Agree,Agree,Agree,Neutral,Neutral,Agree,Disagree,Neutral,Disagree,Strongly Disagree,Agree,Agree,Agree,Strongly Disagree,Agree,Agree,Agree,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Agree,Strongly Agree,,
Social Media,8/7/20 16:05,8/7/20 16:28,1376,8/7/20 16:28,Others? Please specify.,Software engineer,3-5 years,Yes,Yes,Neutral,Neutral,,Neutral,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,,Strongly Agree,Strongly Agree,,Strongly Disagree,,Neutral,Agree,Disagree,Strongly Agree,Agree,Agree,Agree,Agree,Author ignoring comments.,"It should not negatively affect readability, unless not without a good reason."
Social Media,8/7/20 18:43,8/7/20 19:18,2102,8/7/20 19:18,Developer,,6-10 years,Yes,Yes,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Agree,Agree,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Disagree,Agree,Agree,Agree,Agree,Neutral,Agree,Agree,Agree,,
Social Media,8/7/20 12:51,8/8/20 4:39,56861,8/8/20 4:39,Developer,,>10 years,Yes,Yes,Strongly Disagree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Neutral,Agree,Disagree,Disagree,Neutral,Neutral,Strongly Disagree,Strongly Disagree,Disagree,Neutral,Agree,Neutral,Neutral,Agree,Agree,Neutral,Agree,"from the questions phrasing it is unclear if you ask whether these are common reason to rejection or a justified reason for rejection.
 I interpreted them as justified reasons.
 Another rejection reason is too big refactoring.",By definition - it improves the design.
Social Media,8/10/20 22:43,8/10/20 22:47,229,8/10/20 22:47,Developer,,< 3,Yes,Yes,Neutral,Neutral,Strongly Agree,,Agree,Strongly Agree,Strongly Agree,Disagree,Disagree,Neutral,Strongly Agree,Strongly Agree,,,Disagree,Agree,Disagree,,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,,,
Social Media,8/12/20 5:12,8/12/20 5:25,758,8/12/20 5:25,Developer,,6-10 years,Yes,Yes,Neutral,Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Disagree,Strongly Agree,Strongly Agree,Agree,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Agree,Agree,"""Stylistic choices""
 Non adherence to the general project's development guidelines",Confirming before hand that the refactoring is wanted and warranted.
Social Media,8/17/20 13:55,8/17/20 14:11,1004,8/17/20 14:11,Others? Please specify.,IT Consultant,< 3,Yes,Yes,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Strongly Agree,Agree,Agree,Agree,,Strongly Agree,Agree,Neutral,Agree,,,Agree,Strongly Agree,,Agree,Neutral,Strongly Agree,Neutral,,
Social Media,8/17/20 15:49,8/17/20 16:02,772,8/17/20 16:02,Developer,,>10 years,Yes,Yes,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Agree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,Disagree,"there are two main reasons and they are not clearly listed above:
 - refactoring is risky in certain cases (e.g. insufficient test coverage)
 - refactoring is expensive - reviewing refactoring changes is time-consuming, especially if they touch many files
 

 But in my experience, at work refactoring is very rarely rejected. Once someone takes times to refactor something it almost always gets merged (possibly after some tweaks to address issues). Rejected refactoring is a non-issue.","Small commits with not many lines changed.
 

 If lost of changes - preferably single refactoring in a commit and ideally performed automatically (with the commands included in the commit message if viable)."
OSS,8/14/20 21:08,8/17/20 16:58,244204,8/17/20 16:58,Technical Lead,,>10 years,Yes,Yes,,,,,,,,,,,,,,,,,,,,,,,,,
OSS,8/17/20 17:19,8/17/20 17:23,227,8/17/20 17:23,Developer,,< 3,Yes,Yes,Neutral,Disagree,Agree,Neutral,Neutral,Neutral,Neutral,Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Disagree,Neutral,Neutral,Neutral,Disagree,Disagree,Disagree,Disagree,Disagree,"two other reasons, (1) is probably the main reason of all reasons.
 

 (1) Abandoned project and the owner probably doesn't even look at it.
 (2) ""this is massive and this is only my hobby project and i don't really want to have to understand it""","Reading all the docs, writing tests."
OSS,8/17/20 17:55,8/17/20 17:59,276,8/17/20 17:59,Developer,,< 3,Yes,No,Agree,Neutral,Strongly Agree,Neutral,Agree,Agree,Neutral,Strongly Agree,Disagree,Disagree,Agree,,Strongly Agree,Disagree,Disagree,Agree,,Neutral,Neutral,Agree,Neutral,Agree,,,
OSS,8/17/20 19:31,8/17/20 19:35,234,8/17/20 19:35,Developer,,3-5 years,Yes,No,Agree,Strongly Agree,Agree,Neutral,Strongly Agree,Disagree,Agree,Strongly Disagree,Strongly Disagree,Neutral,Strongly Agree,Agree,Strongly Agree,Strongly Disagree,Agree,Neutral,Neutral,Strongly Agree,Agree,Agree,Disagree,Agree,,,
OSS,8/17/20 22:14,8/17/20 22:17,184,8/17/20 22:17,Developer,,3-5 years,Yes,Yes,Agree,Agree,Neutral,Strongly Agree,Strongly Agree,Neutral,Agree,Agree,Agree,Neutral,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Agree,Agree,Agree,Agree,Agree,Agree,Agree,,
OSS,8/17/20 22:26,8/17/20 22:30,240,8/17/20 22:30,Sotware Architect,,6-10 years,Yes,Yes,Agree,Agree,,,Agree,,,,,,,,,,,,,,,,,,,,
OSS,8/17/20 23:49,8/17/20 23:53,231,8/17/20 23:53,Developer,,< 3,Yes,Yes,Neutral,Agree,Neutral,Neutral,Strongly Disagree,Strongly Disagree,Agree,Agree,Disagree,Disagree,Neutral,Neutral,Neutral,Agree,Agree,Agree,Disagree,Neutral,Neutral,Agree,Agree,Neutral,Agree,,"Same functionality but with cleaner, easier to read implementation."
OSS,8/17/20 23:48,8/18/20 0:10,1355,8/18/20 0:10,Developer,,>10 years,Yes,Yes,Agree,Strongly Agree,Agree,Neutral,Disagree,Disagree,Strongly Agree,Agree,Agree,Agree,Agree,Agree,Agree,Agree,Neutral,Agree,Neutral,Neutral,Agree,Strongly Agree,Agree,Agree,Disagree,"This ignores the social dimension which often has a bigger impact than the technical.
 

 When it comes to reasons that prevent any non maintainer PRs the elephant in the room is still that design by committee is a poor way to move towards a steadily improving solution. There is politics more then technical reasoning. Conway's law in action. People defend their interests or the ones they think the company has they are working for. This isn't in the interest of the project, maintainability, or any other technical aspect.
 

 Second big reason that PRs do not happen is attitude. Most projects aren't really thankful for contributions. They treat PRs as if you attack them, not that you making a gift. You will be asked to do all kinds of style related changes. They forget its a gift, be thankful and do the style changes themselves. In such a environment you must be either paid to do the PR or be really, really desperate.","When doing refactoring that does not change functionality or alter performance characteristics:
 * clear and manageable scope
 * clear and uniform type of change
 

 When doing refactoring that changes functionlity or performance characteristics:
 * single high level change at a time
 * provide reasoning what the issue is and how the refactoring improves it
 * provide numbers that show the improvement (for performance)"
OSS,8/18/20 1:47,8/18/20 1:59,744,8/18/20 1:59,Sotware Architect,,6-10 years,Yes,Yes,Disagree,Agree,Strongly Agree,Neutral,Strongly Disagree,Disagree,Agree,Strongly Agree,Neutral,Disagree,Disagree,Disagree,Strongly Disagree,Neutral,Strongly Disagree,Agree,Strongly Agree,Neutral,,,Disagree,Agree,Agree,"Ripple effect. One of the biggest factors, because one refactoring task often leads to opening other tasks.","The changes made have to be consistent with the Architecture. Frequent small changes with little impact have more tendency of acceptance than one big change with big impact.
 Also, refactored code is expected to be better documented. Refactoring without proper documentation is half cooked meal.
 Refactoring should not only pass existing tests but introduce new test cases, especially non-functional."
Friends,8/17/20 16:07,8/17/20 17:02,3326,8/17/20 17:02,Developer,,< 3,Yes,Yes,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,Neutral,"* Refactoring should provide more value than the time spent on its review and potential time spent by other engineers using VCS blame to find the last change that touched a particular line. For example, a change that reorders some helper functions in a file to increase readability probably does not meet this criterion: with modern IDEs, most engineers don't care where a function is defined; VCSs work bad with code moves, so will require extra effort to see that there are actually no changes in the moved functions; and everyone trying to find the last commit changing a function will instead find the reordering commit and will have to skip it manually.
 * Refactoring should be driven by real code change requirements, not an abstract sense of beauty. It allows the author to show why the refactoring is needed (i.e. ""I want to change X, and without this refactoring it will be worse, because Y""). It also facilitates moving the discussion from personal opinions to real problems and their solutions.
 * Refactoring the code that does not have good test coverage is hard and dangerous: refactoring often changes the behaviour of edge cases or can even break the normal code flow. I believe it's okay to require an improvement to the test coverage before a complex refactoring and reject the refactoring if the author disagrees or does not want to spend time on it.
 * Potential code ownership and licensing issues should be considered if refactoring introduces new dependencies (by adding a new library). Even though using an external helper library might be a good medium-term solution, time spent upstreaming required changes or, in the worst case, maintaining a custom fork of the library, might be not worth it. Using a helper library under an overly restrictive license (such as GPL) might cause legal problems in the future or limit possible deployment options.
 * If a refactoring contains multiple large steps (e.g. introduce a new API, migrate all calls, and remove the old API), the author has to prove that they will dedicate enough time to drive the refactoring to completion. Otherwise there is a risk of making the situation worse (e.g. by having two parallel implementations or two similar APIs and no defined migration plan) or forcing other engineers to pick up the work.
 * Refactoring changes should be easy to review: split into multiple small changes when it makes sense, have good descriptions that clearly describe why and how the refactoring is done.",
Friends,8/17/20 17:36,8/17/20 18:18,2519,8/17/20 18:18,Others? Please specify.,Software engineer,3-5 years,Yes,Yes,Neutral,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Agree,Agree,Strongly Agree,Strongly Agree,Disagree,,Agree,Disagree,Disagree,Disagree,Neutral,Neutral,Neutral,Agree,"While working at Google, I personally mostly encountered refactoring pool requests that were rejected either due to them either worsening readability, or not really improving anything objectively, or being risky. However, in my experience, rejected requests happen rather rarely. Most of the time both author and the reviewer(s) work together and come with a good solution.","- They should objectively improve something (readability, simplicity, maintainability, extensibility, performance, etc.). 
 - The improvements should big enough to be worth the costs and risks."
