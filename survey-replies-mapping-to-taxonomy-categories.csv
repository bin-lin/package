Mapping To Taxonomy Leafs,Mapping To Taxonomy Leaf ID,Mapped To Taxonomy-Root Category,Rejection Reasons
"Do not follow PR process,  Are stylistic changes with no clear benefit","P6, C5","Contributor, Risky or with Limited/Unclear benefits","""Stylistic choices""
 Non adherence to the general project's development guidelines"
"Introduce bugs/break APIs/breaks compatibility, Bring potential risks which outweigh their value","C8, C2","Negative Effect On Functional/Non Functional Software Properties, Bring potential risks which outweigh their value, Risky or with Limited/Unclear benefits","* Breaks backward compatibility

This pertains to open source:

* Contributors come and go usually only submitting a PR to handle their own specific use case.  Reviewers are usually maintainers of the project.  Any significant refactoring means that an area of the codebase that was once fully understood by many, is now fully understood only by the contributor.  In thiscase, the refactoring is going to have to be really good to be accepted."
"Do not adhere to coding conventions, Require high review cost/Do not have available reviewers, Do not add value in the eyes of customer","P14, C13, C3","Negative Effect On Functional/Non Functional Software Properties, Reviewer, Risky or with Limited/Unclear benefits","* Lack of time to review thoroughly (due to upcoming deadline/end of sprint)
* Don't add functional value from the customer/CEO perspective
* Controversial code style"
"Are too large, Are not in the community interest, Do not implement recommended changes, Decrease readability/understandability,Need to be properly commented/documented, Do not fully address the code quality issues","P12,C6,P7, C11, C26, C25","PR size and content,Risky or with Limited/Unclear benefits, Contributor, Negative Effect On Functional/Non Functional Software Properties, Additional work needs to be performed, Additional work needs to be performed","* touches too many files
* reviewer is uncomfortable with generics
* contains a mix of refactoring plus other changes
* needlessly renames variables
* doesn't address unrelated issues ""while you're in there"" e.g. if you touch it, you should add missing javadocs, clean up compiler warnings, etc at the same time
* will make it harder to backport fixes between branches with and without the refactoring"
"Do not have upfront contact/discussion, Are inactive: (author/community)","P20, P19","Planning, Planning","1. lack of discussion of the refactoring plan
    The contributor should have a discussion with maintainers **before** submitting a refactoring PR. Maintainers may not like contributors who send lots of changes without talking to them before.
2. too many 'reject & resubmit'
    Endless 'request changes' usually ruin the contributor's patience, leaving the proposed refactoring discontinued.
"
"Are driven by abstract beauty but not by real code change requirements, Do not add value in the eyes of customer, Are not in the community interest, Require high review cost/Do not have available reviewers","C14, C3, C6, P14","Negative Effect On Functional/Non Functional Software Properties, Risky or with Limited/Unclear benefits, Risky or with Limited/Unclear benefits, Reviewer","1. Subjective design
2. Refactoring makes the old code alien to the initial author too as well as to the other developers.
3. Steal developers' time that has to review the refactoring but brings no immediate business value and only subjective long-term values.
"
"Need additional testing, Lead to disagreement on overall benefit of refactoring","C24, C4","Additional work needs to be performed, Risky or with Limited/Unclear benefits","1) Test coverage. Often, older code being refactored is ""ugly"", may not have great test coverage, but is battle-tested in production. The newer refactored code isn't battle-tested, so it needs more automated test coverage to compensate.

2) Clear benefit, such as improved readability, testability, modularity, or extensibility. Sometimes the benefits of a refactor are subjective, and there is not consensus that the new version is actually an improvement."
,,,"Above list is pretty comprehensive, can't think of any other reason."
Bring potential risks which outweigh their value,C2,Risky or with Limited/Unclear benefits,"Any of these reasons might apply, but there are always tradeoffs, depending on the original goal of the refactoring."
"Bring potential risks which outweigh their value, Negative Effect On Functional/Non Functional Software Properties","C2, C10","Risky or with Limited/Unclear benefits, Negative Effect On Functional/Non Functional Software Properties",Architecture level refactoring often introduce conflict of cost(both money and time) that has ambiguous ROI because return is ofthen based on assumptions. Module level refactoring often has problems with non-functional requarements such as robustnes because it is very hard to cover them in integration testing. Function level refactoring again have problems with non functional requarements because of level of test coverage and risk of accumulated bugs.
"Bring potential risks which outweigh their value, Are too large, Do not adhere to coding conventions, Contain problematic exception handling, Need additional testing, Generated automatically are not considered valuable","C2, P11, C13, C21, C24, C1","Risky or with Limited/Unclear benefits, PR size and content, Negative Effect On Functional/Non Functional Software Properties, Poor design and implementation decisions, Additional work needs to be performed, Risky or with Limited/Unclear benefits","As for a financial application, security has top priority. If a refactoring is too large/complex it carries some risk to break the existing project and that is a main reason why we reject PRs. Other reasons is when devs introduce different style/patterns/exc handling as used in the project. We usually recommend devs to break up PRs to small chunks doing small and easy to review changes which limits risks to break things. Best is also to add tests to ensure the existing beahviour has not changed by the refactoring. Pure technical refacotrings (or automated renaming over many classes) are not considered valueable as they inroduce more effort for the reviewer as if he would do the change himself. The trust into a new dev is lower than into a maintainer, so such refactorings are better done by maintainers themself to limit risk exposure (malicious dev tries to inject some change by burying it in a mass of changes in the hope it get overlooked). 
"
Do not implement recommended changes,P7,Contributor,Author ignoring comments.
"Opt for personal preferences over measured quality increase, Are too large","P9, P12","Contributor, PR size and content","Bulk changes wo/ benefit, personal preferences over measured quality increase"
"Are too large, Are not in the community interest, Bring potential risks which outweigh their value","P12, C6, C2","PR size and content, Risky or with Limited/Unclear benefits, Risky or with Limited/Unclear benefits","Change is too big (many projects do not like changes for fear of breaking something and prefer incremental changes, even if they lead to worse code).
Changes are not understood (code contributed by contributors not here anymore)."
Conflict with planned code changes,C7,Risky or with Limited/Unclear benefits,conflict with planned code changes.
Have reviewers who do not focus on long-term benefits or sustainability of software quality,P17,Reviewer,"Decision maker does not understand the purpose and ""enabling"" role of the change
in order to affect longer-term changes beneficial for the project, or simply does not care about sustaining software quality.
"
"Bring potential risks which outweigh their value, Reviewer","C2, P14","Risky or with Limited/Unclear benefits, Reviewer","Disagreement over whether ""hacky"" solutions are justified to fix small problems in an unorthadox manner, or whether the mere presence of hacky solutions showcases fundamental problems with design philosophy and are thus rejected regardless of effectiveness. Often perfect is the enemy of good enough and results in wasting time for no practical benefit, but death by a thousand papercuts may emerge if hacky solutions are not effectively managed depending on the codebase. Individual reviews may arbitrarily have different decisions on acceptibility here."
Are too large,P12,PR size and content,"from the questions phrasing it is unclear if you ask whether these are common reason to rejection or a justified reason for rejection.
 I interpreted them as justified reasons.
 Another rejection reason is too big refactoring."
Have reviewers who are unwilling to review and accept major code change,P15,Reviewer,General unwillingness to review and accept major code changes
Have reviewers who negatively perceive changes to code they own,P17,Reviewer,I believe the resistance to accepting refactoring PRs owes a lot to the https://en.wikipedia.org/wiki/Curse_of_knowledge ... i.e. that those reviewing the PR already understand how the existing code works through experience and therefore find it difficult to see weaknesses in the design pertaining to the code's readability to fresh eyes. This may cause them to underestimate the value of a PR which makes things more understandable to a consumer of the public APIs.
,,,I believe this table tacked every issue beautifully :)
"Do not consider code ownership and licensing issues, Do not implement recommended changes, Need additional testing, Need to be properly commented/documented","P8, P7, C24, C26","Contributor, Contributor, Additional work needs to be performed, Additional work needs to be performed","I don't have the time to fullfill all formal requirements like signing an contributer agreement, have 100% code  coverage and document everything with complete javadoc."
"Require high review cost/Do not have available reviewers, Are inactive: (author/community)","P14, P19","Reviewer, Planning","I experienced a lot of times that the authors want to get paid to review and merge PRs. 
Typically as a freelancer I commit to OSS software that is used by my customer and has bugs. If the author want to get paid for every PR this usually ends in a fork and you never upstream your changes anymore. You really have to work for a very open minded company to enforce upstream changes."
Have reviewers who are unwilling to review and accept major code change,P17,Reviewer,I have twice made refactoring pull requests where the reviewer was also a core developer for the code being refactored. Both times the requests met resistance that could be attributed to the reviewer being unwilling to accept that the original design had major flaws. It would have been better if a person without investment in that part of the code had acted as an independent mediator.
,,,I haven't seen enough of these to answer this question but pretty much all of the answers are valid reasons to reject a PR.
"Need additional testing, Need to be properly commented/documented","C24, C26","Additional work needs to be performed, Additional work needs to be performed","I missed some very important points, why PR might be rejected:

- Missing documentation for new features
- Missing tests"
Are stylistic changes with no clear benefit,C5,Risky or with Limited/Unclear benefits,"I question the entire premise of the survey. Perhaps you should start by surveying how prevalent this ""problem"" is. 

I don't think refactorings are ""often"" rejected. 

Doing things like changing the test suite to accommodate a ""refactoring"" will clearly cause something to be rejected. Stylistic changes with no clear benefit are at risk of getting rejected."
Are contributed by developers without good reputation,P10,Contributor,"I think that PRs could have implicit value based on the perceived authority of the owner of that PR. In the other words, more respected developers tend to have more approved PRs because reviewers might often just trust the PR author because ""He/She knows what he/she is doing. I trust them. LGTM/Approval. Now let's have a pizza already.""
IMHO, increasing the number of reviewers might help to mitigate that risk."
Have reviewers who negatively perceive changes to code they own,P16,Reviewer,"I think this is missing the most common reason I’ve seen: ego. Often refactoring changes are rejected because the original author of the code is attached to it and perceives any change as negative, regardless of the change itself."
"Are too large, Are inactive: (author/community)","P12, P19","PR size and content, Planning","If the change contains too many manually performed refactorings, it is hard to review it. Often the change is not directly rejected, but nobody wants to review the change and it becomes stale."
"Do not have upfront contact/discussion, Lead to disagreement on overall benefit of refactoring, Are not in the community interest","P17, C4, C6","Reviewer, Risky or with Limited/Unclear benefits, Risky or with Limited/Unclear benefits","If we are talking about open source project, a PR can be rejected because the developer creating the PR did not communicate with the team in charge of the project. 
- Maybe that bug/feature/refactoring was assigned to somebody else. 
- Maybe that bug/feature/refactoring is not needed or has not been discussed within the project.

I have also seen some PR rejected because it introduces a new programming language (like Kotlin, when the whole project is in Java)"
"Are not in the community interest, Require high review cost/Do not have available reviewers","C6, P14","Risky or with Limited/Unclear benefits, Reviewer","In general, developers still feel these are lower priority than new functionality.  Many co-workers feel they do not have enough time."
"Require high review cost/Do not have available reviewers, Lead to disagreement on overall benefit of refactoring","P14, C4","Reviewer, Risky or with Limited/Unclear benefits","In my experience, unsolicited refactoring contributions are typically rejected due to: (1) the effort required from maintainers to review the changes, given limited availability; (2) the maintainer considers them of little value since they don't fix bugs or introduce new features; (3) maintainers believe they pollute the version history."
Do not add value in the eyes of customer,C3,Risky or with Limited/Unclear benefits,"In the eyes of the stakeholder/customer refactoring code does not add value. Thus also no time is given to refactoring, as there are ""more urgent things"" to do on the already stretched deadlines."
Include unnecessary files/non-code refactoring,P13,PR size and content,"Including IDE specific configuration files into a .gitignore,"
Lead to disagreement on overall benefit of refactoring,C4,Risky or with Limited/Unclear benefits,Increased readability added by refactoring commit was not regarded as important enough to take the time to deliver the change.
Need additional testing,C24,Additional work needs to be performed,"Insufficient automated test coverage to demonstrate the proposed contribute does not change the current behavior. If this is the case, tests should be written and contributed against the unmodified code base."
Include unnecessary files/non-code refactoring,P13,PR size and content,Introduced 3rd party component where it wasn't necessary.
Lead to disagreement on overall benefit of refactoring,C4,Risky or with Limited/Unclear benefits,It is not high priority
"Require high review cost/Do not have available reviewers, Lead to disagreement on overall benefit of refactoring, Need additional testing","P14, C4, C24","Reviewer, Risky or with Limited/Unclear benefits, Additional work needs to be performed",It is not sponsored by most companies and thus lacks support budgets for thorough testing
,,,"JetBrains doesn't use GitHub's infrastructure for accepting proposed pull-requests, they simply cherry-pick commits of a pull-request and reject it on GitHub. All the commits eventually end up in Intellij IDEA's code base"
Require high review cost/Do not have available reviewers,P14,Reviewer,Lack of good maintainers. The most typical reason is desire to keep status quo.
"Need to be properly commented/documented, Lead to disagreement on overall benefit of refactoring","C26, C4","Additional work needs to be performed, Risky or with Limited/Unclear benefits",Lack of suitable documentation / Doesn't improve documentation while simultaneously upending other developer's mental models.
"Are too large, Bring potential risks which outweigh their value, Are inactive: (author/community)","P12, C2, P19","PR size and content, Risky or with Limited/Unclear benefits, Planning",Large changes are hard to review so reviewers hesitate from reviewing. After sometime proposed changes stale either due to codebase moving forward or lose of interest and enthusiasm from contributor.
"Lead to disagreement on overall benefit of refactoring, Require high review cost/Do not have available reviewers","C4, P14","Risky or with Limited/Unclear benefits, Reviewer","Most refactorings we ever considered in my team were rejected before they were implemented: Architects and Engineers would agree that they are important, but there's not enough budget for non-functional changes."
Lead to disagreement on overall benefit of refactoring,C4,Risky or with Limited/Unclear benefits,No clear reason or value given.
"Do not have upfront contact/discussion, Are too large, Need additional testing","P20, P12, C24","Planning, PR size and content, Additional work needs to be performed","No upfront contact or discussion 

Too large PRs
No tests
"
"Are too large, Bring potential risks which outweigh their value","P12, C2","PR size and content, Risky or with Limited/Unclear benefits","Not done incrementally, such that there is an enormous amount of code change that the reviewer has no reasonable chance of confirming the changes to be safe and without side-effects."
"Are too large, Bring potential risks which outweigh their value","P12, C2","PR size and content, Risky or with Limited/Unclear benefits","often it is simply due to the footprint of the change is too large and seems ""risky"" to introduce especially when it is getting close to release deadline"
Do not adhere to coding conventions,C13,Negative Effect On Functional/Non Functional Software Properties,Primarily due to conflicting team conventions. Where at the contributor is under the assumption their refactoring approach works along with already in place coding style/conventions.
Change,P1,Change,Projects I work on are really refactoring-friendly. We would love to do the refactoring but the main issue is that there is almost no time for it.
Have subjective value or unclear goals,C3,Risky or with Limited/Unclear benefits,Proper explanation of the rationale behind the pull request.
"Introduce bugs/break APIs/breaks compatibility, Do not have upfront contact/discussion","C8, P20","Negative Effect On Functional/Non Functional Software Properties, Planning","Refactoring by definition is to improve an aspect of the software without changing function. Rejected refactoring usually accidentally change functionality, a mistake that can be detected during review before the work is accepted.

The biggest obstacle to reacting related contributions is communication. "
Bring potential risks which outweigh their value,C2,Risky or with Limited/Unclear benefits,Refactoring contributions should be a clearly defined improvement which does not change behavior. Such as renaming or moving classes. Changes with potential side effects should be minimalistic and done in a separate PR.
Lead to disagreement on overall benefit of refactoring,C4,Risky or with Limited/Unclear benefits,Refactoring phase is not considered as critical as testing phase.
"Lead to disagreement on overall benefit of refactoring, Are obsolete","C4, P1","Risky or with Limited/Unclear benefits, Change",Refactorings taht are just plain unneeded or unwanted.
Conflict with planned code changes,C7,Risky or with Limited/Unclear benefits,Rejected due to various upcoming ballerina changes
Are inactive: (author/community),P19,Planning,"Repository admin is simply unresponsive or the project is un-officially dead, without proper notification or documentation, therefore no pull requests are actioned."
Bring potential risks which outweigh their value,C2,Risky or with Limited/Unclear benefits,"Risk of breaking existing code (already mentioned in survey questions)
"
Do not fully address the code quality issues,C25,Additional work needs to be performed,Same refactoring concept are not applied to all applicable places.
Have reviewers who are unwilling to review and accept major code change,P15,Reviewer,"Similar to ""change software behavior / original design"" or ""readability"", some maintainers reject contributions they don't feel comfortable introducing in the code base, wether the don't appreciate the new design or not enough knowledge to understand a more idiomatic approach. The latter is more common in functional programming languages, as idiomatic algorithms are not as straightforward to understands as imperative algorithms."
,,,"Some Other remark: your process of selecting participants is not 100% working. I got chosen because of a seemingly rejected PR in Signal-Android. But thats the way they Merge the code, they dont merge the PR but Just Push the Commit and Close the PR. You might have a Look Into that."
Are too large,P12,PR size and content,Sometimes they grow too big
Lead to disagreement on overall benefit of refactoring,C4,Risky or with Limited/Unclear benefits,The benefits aren't understood / the value underestimated.
"Do not have upfront contact/discussion, Lead to disagreement on overall benefit of refactoring","P20, C4","Planning, Risky or with Limited/Unclear benefits",The maintainers and the contributor can see what “better” code looks like differently and contributors often fail to check on whether a certain type of change would even be considered before submitting them.
"Are not in the community interest, Opt for personal preferences over measured quality increase","C6, P9","Risky or with Limited/Unclear benefits, Contributor","The most often reason we reject contributions is that the person has tried to solve a problem for themselves and do not know how to make this general to wider audience.

We always aim to ake sure the code in our graphql-java library is widely  applicable - at the expense of solving some specific problems (like json handling / web handling ) more easily."
"Bring potential risks which outweigh their value, Need additional testing, Require high review cost/Do not have available reviewers, Are too large","C2, C24, P14, P12","Risky or with Limited/Unclear benefits, Additional work needs to be performed, Reviewer, PR size and content","there are two main reasons and they are not clearly listed above:
 - refactoring is risky in certain cases (e.g. insufficient test coverage)
 - refactoring is expensive - reviewing refactoring changes is time-consuming, especially if they touch many files
 

 But in my experience, at work refactoring is very rarely rejected. Once someone takes times to refactor something it almost always gets merged (possibly after some tweaks to address issues). Rejected refactoring is a non-issue."
Are too large,P12,PR size and content,"To big commit (to many files) with more than one reason for change, e.g. rename variable1 and fix typo and ... some hidden changes?"
"Are too large, Are not cohesive - tangled change, Require high review cost/Do not have available reviewers, Need additional testing","P12, P11, P14, C24","PR size and content, PR size and content, Reviewer, Additional work needs to be performed","Too large for convenience: change touches a lot of code or changes something fundamental, would require extensive reviewing and testing."
Contain choices of non-optimal design solutions,C17,Poor design and implementation decisions,"Unknown.  Refactoring merge requests I make through work are generally accepted, though rare, and I have made exactly one refactoring merge request to an open source project, which I voluntarily closed after discovering a better approach."
,,,UTF-8 chars in commit message ;)
"Are inactive: (author/community), Are too large, Have reviewers who are unwilling to review and accept major code change","P19, P12, P15","Planning, PR size and content, Reviewer","two other reasons, (1) is probably the main reason of all reasons.
 

 (1) Abandoned project and the owner probably doesn't even look at it.
 (2) ""this is massive and this is only my hobby project and i don't really want to have to understand it"""
"Have reviewers who do not focus on long-term benefits or sustainability of software quality, Have reviewers who negatively perceive changes to code they own, Do not fully address the code quality issues","P17, P16, C25","Reviewer, Reviewer, Additional work needs to be performed","This ignores the social dimension which often has a bigger impact than the technical.
 

 When it comes to reasons that prevent any non maintainer PRs the elephant in the room is still that design by committee is a poor way to move towards a steadily improving solution. There is politics more then technical reasoning. Conway's law in action. People defend their interests or the ones they think the company has they are working for. This isn't in the interest of the project, maintainability, or any other technical aspect.
 

 Second big reason that PRs do not happen is attitude. Most projects aren't really thankful for contributions. They treat PRs as if you attack them, not that you making a gift. You will be asked to do all kinds of style related changes. They forget its a gift, be thankful and do the style changes themselves. In such a environment you must be either paid to do the PR or be really, really desperate."
Lead to ripple effects,C18,Poor design and implementation decisions,"Ripple effect. One of the biggest factors, because one refactoring task often leads to opening other tasks."
"Require high review cost/Do not have available reviewers, Bring potential risks which outweigh their value, Opt for personal preferences over measured quality increase, Need additional testing, Are stylistic changes with no clear benefit, Introduce bugs/break APIs/breaks compatibility, Lead to disagreement on overall benefit of refactoring, Do not implement recommended changes, Do not consider code ownership and licensing issues, Are too large","P14, C2, P9, C24, C5, C8, C4, P7, P8, P12","Reviewer, Risky or with Limited/Unclear benefits, Contributor, Additional work needs to be performed, Risky or with Limited/Unclear benefits, Negative Effect On Functional/Non Functional Software Properties, Risky or with Limited/Unclear benefits, Contributor, Contributor, PR size and content","* Refactoring should provide more value than the time spent on its review and potential time spent by other engineers using VCS blame to find the last change that touched a particular line. For example, a change that reorders some helper functions in a file to increase readability probably does not meet this criterion: with modern IDEs, most engineers don't care where a function is defined; VCSs work bad with code moves, so will require extra effort to see that there are actually no changes in the moved functions; and everyone trying to find the last commit changing a function will instead find the reordering commit and will have to skip it manually.
 * Refactoring should be driven by real code change requirements, not an abstract sense of beauty. It allows the author to show why the refactoring is needed (i.e. ""I want to change X, and without this refactoring it will be worse, because Y""). It also facilitates moving the discussion from personal opinions to real problems and their solutions.
 * Refactoring the code that does not have good test coverage is hard and dangerous: refactoring often changes the behaviour of edge cases or can even break the normal code flow. I believe it's okay to require an improvement to the test coverage before a complex refactoring and reject the refactoring if the author disagrees or does not want to spend time on it.
 * Potential code ownership and licensing issues should be considered if refactoring introduces new dependencies (by adding a new library). Even though using an external helper library might be a good medium-term solution, time spent upstreaming required changes or, in the worst case, maintaining a custom fork of the library, might be not worth it. Using a helper library under an overly restrictive license (such as GPL) might cause legal problems in the future or limit possible deployment options.
 * If a refactoring contains multiple large steps (e.g. introduce a new API, migrate all calls, and remove the old API), the author has to prove that they will dedicate enough time to drive the refactoring to completion. Otherwise there is a risk of making the situation worse (e.g. by having two parallel implementations or two similar APIs and no defined migration plan) or forcing other engineers to pick up the work.
 * Refactoring changes should be easy to review: split into multiple small changes when it makes sense, have good descriptions that clearly describe why and how the refactoring is done."
"Decrease readability/understandability, Lead to disagreement on overall benefit of refactoring, Bring potential risks which outweigh their value","C11, C4, C2","Negative Effect On Functional/Non Functional Software Properties, Risky or with Limited/Unclear benefits, Risky or with Limited/Unclear benefits","While working at Google, I personally mostly encountered refactoring pool requests that were rejected either due to them either worsening readability, or not really improving anything objectively, or being risky. However, in my experience, rejected requests happen rather rarely. Most of the time both author and the reviewer(s) work together and come with a good solution."